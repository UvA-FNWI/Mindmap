// Generated by CoffeeScript 1.12.7
(function() {
  var PanHandler,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PanHandler = (function() {
    function PanHandler() {
      this.drag = bind(this.drag, this);
      this.listening = false;
      this.dragging = false;
      this.previousMouseX = this.previousMouseY = 0;
      this.mindmap = document.getElementById("mindmap");
      this.animation = new Animation(this.mindmap);
    }

    PanHandler.prototype.startListening = function() {
      this.listening = true;
      this.bindMouseDown();
      this.bindMouseUp();
      this.bindTouchDown();
      this.bindTouchUp();
      this.bindMouseMove();
      return this.bindTouchMove();
    };

    PanHandler.prototype.bindMouseDown = function() {
      return this.mindmap.addEventListener("mousedown", (function(_this) {
        return function(event) {
          if (_this.listening) {
            _this.dragging = true;
            _this.previousMouseX = event.clientX;
            return _this.previousMouseY = event.clientY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindMouseUp = function() {
      return this.mindmap.addEventListener("mouseup", (function(_this) {
        return function(event) {
          _this.dragging = false;
          return event.preventDefault();
        };
      })(this));
    };

    PanHandler.prototype.bindTouchDown = function() {
      return this.mindmap.addEventListener("touchdown", (function(_this) {
        return function(event) {
          if (_this.listening) {
            _this.dragging = true;
            event.preventDefault();
            _this.previousMouseX = event.targetTouches[0].pageX;
            return _this.previousMouseY = event.targetTouches[0].pageY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindTouchUp = function() {
      return this.mindmap.addEventListener("touchup", (function(_this) {
        return function(event) {
          _this.dragging = false;
          return event.preventDefault();
        };
      })(this));
    };

    PanHandler.prototype.bindMouseMove = function() {
      return this.mindmap.addEventListener("mousemove", (function(_this) {
        return function(event) {
          if (_this.dragging && _this.listening) {
            event.preventDefault();
            _this.drag(event.clientX, event.clientY);
            _this.previousMouseX = event.clientX;
            return _this.previousMouseY = event.clientY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindTouchMove = function() {
      return this.mindmap.addEventListener("touchmove", (function(_this) {
        return function(event) {
          if (_this.dragging && _this.listening) {
            event.preventDefault();
            _this.drag(event.targetTouches[0].pageX, event.targetTouches[0].pageY);
            _this.previousMouseX = event.targetTouches[0].pageX;
            return _this.previousMouseY = event.targetTouches[0].pageY;
          }
        };
      })(this));
    };

    PanHandler.prototype.drag = function(currentMouseX, currentMouseY) {
      var newX, newY;
      newX = this.mindmap.offsetLeft + currentMouseX - this.previousMouseX;
      newY = this.mindmap.offsetTop + currentMouseY - this.previousMouseY;
      return this.animation.moveSingleFrame(newX, newY);
    };

    return PanHandler;

  })();

}).call(this);
