// Generated by CoffeeScript 1.12.7
(function() {
  var Animation, BaseNode, ChecklistNode, ClickHandler, Mindmap, PanHandler, TextNode, VideoNode, getOuterHeight, isDescendant, measureTextWidth, nodeCounter, recursiveHasClass, supportedNodeTypes, tagCleanup,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Animation = (function() {
    function Animation(element1) {
      this.element = element1;
      this.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }

    Animation.prototype.move = function(fromX, fromY, toX, toY, durationMS) {
      var curS, step, steps;
      steps = durationMS / 16;
      curS = 0;
      step = (function(_this) {
        return function() {
          curS += Math.PI / steps;
          _this.matrix[12] += ((toX - fromX) / steps) * (Math.pow(Math.sin(curS), 2)) * 2;
          _this.matrix[13] += ((toY - fromY) / steps) * (Math.pow(Math.sin(curS), 2)) * 2;
          _this.updateTransformationMatrix();
          if (curS < Math.PI) {
            return requestAnimationFrame(step);
          }
        };
      })(this);
      return requestAnimationFrame(step);
    };

    Animation.prototype.moveRelative = function(moveX, moveY, duration) {
      return this.move(this.matrix[12], this.matrix[13], this.matrix[12] + moveX, this.matrix[13] + moveY, duration);
    };

    Animation.prototype.scale = function(scale) {
      var curS, step, steps;
      steps = 400 / 16;
      curS = 0;
      step = (function(_this) {
        return function() {
          curS += Math.PI / steps;
          _this.matrix[0] += (scale - _this.matrix[0]) / steps;
          _this.matrix[5] += (scale - _this.matrix[0]) / steps;
          _this.updateTransformationMatrix();
          if (curS < Math.PI) {
            return requestAnimationFrame(step);
          }
        };
      })(this);
      return requestAnimationFrame(step);
    };

    Animation.prototype.moveSingleFrame = function(moveX, moveY) {
      var moveAnimation;
      moveAnimation = (function(_this) {
        return function() {
          _this.matrix[12] += moveX;
          _this.matrix[13] += moveY;
          return _this.updateTransformationMatrix();
        };
      })(this);
      return requestAnimationFrame(moveAnimation);
    };

    Animation.prototype.updateTransformationMatrix = function() {
      return this.element.style.transform = "matrix3d(" + this.matrix.join(',') + ")";
    };

    return Animation;

  })();

  ClickHandler = (function() {
    function ClickHandler() {
      this.resetPositionButton = document.getElementById("reset-position-button");
      this.privacyButton = document.getElementById("privacy-button");
      this.resetButton = document.getElementById("reset-button");
      this.zoomInButton = document.getElementById("zoom-in-button");
      this.zoomOutButton = document.getElementById("zoom-out-button");
    }

    ClickHandler.prototype.startListening = function() {
      this.bindPrivacyButton();
      this.bindResetButton();
      this.bindResetPositionButton();
      return this.bindZoomButtons();
    };

    ClickHandler.prototype.bindZoomButtons = function() {
      this.zoomInButton.addEventListener("click", function() {
        return fg.mindmap.zoomIn();
      });
      return this.zoomOutButton.addEventListener("click", function() {
        return fg.mindmap.zoomOut();
      });
    };

    ClickHandler.prototype.bindPrivacyButton = function() {
      return this.privacyButton.addEventListener("click", (function(_this) {
        return function() {
          return fg.mindmap.showPrivacyPopup();
        };
      })(this));
    };

    ClickHandler.prototype.bindResetButton = function() {
      return this.resetButton.addEventListener("click", function() {
        return fg.mindmap.reset();
      });
    };

    ClickHandler.prototype.bindResetPositionButton = function() {
      return this.resetPositionButton.addEventListener("click", function() {
        return fg.mindmap.moveToCenter();
      });
    };

    return ClickHandler;

  })();

  recursiveHasClass = function(element, className) {
    while (element) {
      if (element.classList && element.classList.contains(className)) {
        return true;
      }
      element = element.parentNode;
    }
    return false;
  };

  getOuterHeight = function(element) {
    var margin, styles;
    styles = window.getComputedStyle(element);
    margin = parseFloat(styles["marginTop"]) + parseFloat(styles["marginBottom"]);
    return Math.ceil(element.offsetHeight + margin);
  };

  isDescendant = function(a, b) {
    var node;
    node = a.parentNode;
    while (node !== null) {
      if (node === b) {
        return true;
      }
      node = node.parentNode;
    }
    return false;
  };

  measureTextWidth = function(text) {
    var ruler;
    ruler = document.querySelector("#text-ruler");
    ruler.innerHTML = text;
    return ruler.offsetWidth;
  };

  tagCleanup = function(html) {
    return html.replace(/<\/?(p|div|span).*?>/g, "");
  };

  Mindmap = (function() {
    function Mindmap(callback) {
      if (callback == null) {
        callback = false;
      }
      this.container = document.getElementById("mindmap");
      this.rootNode = document.getElementById("rootnode");
      this.content = document.getElementById("content");
      this.privacyPopup = document.getElementById("privacy-popup");
      this.animation = new Animation(this.container);
      this.zoomFactor = 1.0;
      this.loadData(callback);
    }

    Mindmap.prototype.loadData = function(callback) {
      var httpRequest;
      httpRequest = new XMLHttpRequest();
      httpRequest.onreadystatechange = (function(_this) {
        return function() {
          if (httpRequest.readyState === XMLHttpRequest.DONE) {
            if (httpRequest.status === 200) {
              _this.data = JSON.parse(httpRequest.responseText);
              _this.createStudySelectBalloon();
              if (callback) {
                return callback();
              }
            } else {
              _this.data = {};
              return console.error("Couldn't load the map data!");
            }
          }
        };
      })(this);
      httpRequest.open("GET", "data/content.json");
      return httpRequest.send();
    };

    Mindmap.prototype.updateTextBubbleContent = function(newContent) {
      var fadeInAnimation, fadeOutAnimation, i, len, newBubble, oldBubble, ref;
      ref = document.getElementsByClassName("textbubble");
      for (i = 0, len = ref.length; i < len; i++) {
        oldBubble = ref[i];
        if (oldBubble.innerText.replace(/^\s+|\s+|\n+$/gm, '') === newContent.innerText.replace(/^\s+|\s+|\n+$/gm, '')) {
          return;
        }
        oldBubble.addEventListener("animationend", function() {
          if (oldBubble.parentElement) {
            return oldBubble.parentElement.removeChild(oldBubble);
          }
        });
        oldBubble.addEventListener("webkitAnimationEnd", function() {
          if (oldBubble.parentElement) {
            return oldBubble.parentElement.removeChild(oldBubble);
          }
        });
        oldBubble.classList.add("bubbleFadeOut");
      }
      fadeOutAnimation = new Animation(oldBubble);
      newBubble = document.createElement("div");
      newBubble.className = "textbubble bubbleFadeIn";
      newBubble.appendChild(newContent);
      fadeInAnimation = new Animation(newBubble);
      return this.rootNode.appendChild(newBubble);
    };

    Mindmap.prototype.createStudySelectBalloon = function() {
      var disabledPlaceholder, i, len, ref, selectStudyLabel, studies, study, studySelectBalloon, studySelectContainer, yearSelectContainer;
      studySelectBalloon = document.createElement("span");
      studySelectBalloon.className = "textBubbleContent studySelect no-drag";
      selectStudyLabel = document.createElement("label");
      selectStudyLabel.innerHTML = "Kies je studie en studiejaar:";
      studySelectBalloon.appendChild(selectStudyLabel);
      studySelectContainer = document.createElement("span");
      studySelectContainer.className = "dropdown";
      this.studySelect = document.createElement("select");
      this.studySelect.id = "studySelect";
      disabledPlaceholder = new Option("Selecteer je studie", null, true, true);
      disabledPlaceholder.disabled = true;
      disabledPlaceholder.classList.add("placeholder");
      this.studySelect.appendChild(disabledPlaceholder);
      studySelectContainer.appendChild(this.studySelect);
      studySelectBalloon.appendChild(studySelectContainer);
      yearSelectContainer = document.createElement("span");
      yearSelectContainer.className = "dropdown";
      this.yearSelect = document.createElement("select");
      this.yearSelect.id = "yearSelect";
      this.yearSelect.disabled = true;
      disabledPlaceholder = new Option("Selecteer je studiejaar", null, true, true);
      disabledPlaceholder.classList.add("placeholder");
      disabledPlaceholder.disabled = true;
      this.yearSelect.appendChild(disabledPlaceholder);
      yearSelectContainer.appendChild(this.yearSelect);
      studySelectBalloon.appendChild(yearSelectContainer);
      this.studySelectButton = document.createElement("button");
      this.studySelectButton.id = "studySelectButton";
      this.studySelectButton.innerHTML = "OK";
      this.studySelectButton.disabled = true;
      studySelectBalloon.appendChild(this.studySelectButton);
      studies = Object.keys(this.data.studies);
      this.sortedStudies = studies.sort((function(_this) {
        return function(a, b) {
          var weightA, weightB;
          weightA = parseInt(_this.data.studies[a].data.weight);
          weightB = parseInt(_this.data.studies[b].data.weight);
          if (weightA > weightB) {
            return 1;
          }
          if (weightA < weightB) {
            return -1;
          }
          return 0;
        };
      })(this));
      ref = this.sortedStudies;
      for (i = 0, len = ref.length; i < len; i++) {
        study = ref[i];
        this.studySelect.appendChild(new Option(study, studies.indexOf(study)));
      }
      this.bindStudySelect();
      return this.updateTextBubbleContent(studySelectBalloon);
    };

    Mindmap.prototype.bindStudySelect = function() {
      var studyWeight;
      studyWeight = null;
      this.studySelect.addEventListener("change", (function(_this) {
        return function() {
          var i, j, len, len1, oldOption, ref, sortedYearOptions, year, yearOptions, years;
          _this.studySelectButton.disabled = true;
          studyWeight = parseInt(_this.studySelect.value) + 1;
          years = _this.data.studies[Object.keys(window.fg.mindmap.data.studies).find(key => window.fg.mindmap.data.studies[key].data.weight == studyWeight)].years;
          yearOptions = Object.keys(years);
          sortedYearOptions = yearOptions.concat().sort(function(a, b) {
            var weightA, weightB;
            weightA = parseInt(years[a].data.weight);
            weightB = parseInt(years[b].data.weight);
            if (weightA > weightB) {
              return 1;
            }
            if (weightA < weightB) {
              return -1;
            }
            return 0;
          });
          _this.yearSelect.disabled = yearOptions.length === 0;
          ref = _this.yearSelect.querySelectorAll("option:not([class='placeholder'])");
          for (i = 0, len = ref.length; i < len; i++) {
            oldOption = ref[i];
            _this.yearSelect.removeChild(oldOption);
          }
          for (j = 0, len1 = sortedYearOptions.length; j < len1; j++) {
            year = sortedYearOptions[j];
            _this.yearSelect.add(new Option(year, yearOptions.indexOf(year)));
          }
          return _this.yearSelect.value = null;
        };
      })(this));
      this.yearSelect.addEventListener("change", (function(_this) {
        return function() {
          return _this.studySelectButton.disabled = false;
        };
      })(this));
      return this.studySelectButton.addEventListener("click", (function(_this) {
        return function() {
          _this.selectedStudy = Object.keys(window.fg.mindmap.data.studies).find(key => window.fg.mindmap.data.studies[key].data.weight == studyWeight);
          _this.selectedYear = Object.keys(_this.data.studies[_this.selectedStudy]["years"])[_this.yearSelect.value];
          _this.mindmapData = _this.data.studies[_this.selectedStudy]["years"][_this.selectedYear];
          return _this.renderMindMap();
        };
      })(this));
    };

    Mindmap.prototype.renderMindMap = function() {
      var i, len, node, nodeData, sortedNodes, welcomeBubble;
      welcomeBubble = document.createElement("span");
      welcomeBubble.className = "textBubbleContent standard";
      welcomeBubble.innerHTML = this.data.studies[this.selectedStudy].data.welcomeMessage;
      this.updateTextBubbleContent(welcomeBubble);
      sortedNodes = this.mindmapData.nodes.sort(function(a, b) {
        var weightA, weightB;
        weightA = parseInt(a.weight);
        weightB = parseInt(b.weight);
        if (weightA > weightB) {
          return 1;
        }
        if (weightA < weightB) {
          return -1;
        }
        return 0;
      });
      for (i = 0, len = sortedNodes.length; i < len; i++) {
        nodeData = sortedNodes[i];
        node = new supportedNodeTypes[nodeData.type](nodeData, true);
        node.build().addListeners().render();
      }
      document.getElementById("reset-button").style.display = "inline-block";
      document.getElementById("reset-button").classList.add("fade-in");
      return setTimeout(((function(_this) {
        return function() {
          var hint;
          hint = document.querySelector("#hint");
          hint.classList.add("fade-in");
          return setTimeout((function() {
            hint.classList.remove("fade-in");
            hint.classList.add("fade-out");
            return hint.addEventListener("animationend", function() {
              return hint.parentElement.removeChild(hint);
            });
          }), 7000);
        };
      })(this)), 1000);
    };

    Mindmap.prototype.moveToCenter = function() {
      var moveX, moveY, rootCurrentX, rootCurrentY, rootTargetX, rootTargetY;
      rootTargetX = Math.ceil(document.getElementById("content").offsetWidth / 2 - this.rootNode.offsetWidth / 2);
      rootTargetY = Math.ceil(document.getElementById("content").offsetHeight / 2 - this.rootNode.offsetHeight / 2);
      rootCurrentX = Math.ceil(this.rootNode.getBoundingClientRect().left);
      rootCurrentY = Math.ceil(this.rootNode.getBoundingClientRect().top);
      moveX = rootTargetX - rootCurrentX;
      moveY = rootTargetY - rootCurrentY;
      return this.animation.moveRelative(moveX, moveY, 500);
    };

    Mindmap.prototype.showPrivacyPopup = function() {
      var removePopup;
      removePopup = (function(_this) {
        return function() {
          var animationEnd;
          animationEnd = function() {
            _this.privacyPopup.style.display = "none";
            return _this.privacyPopup.removeEventListener("animationend", animationEnd);
          };
          _this.privacyPopup.addEventListener("animationend", animationEnd);
          _this.privacyPopup.classList.remove("fade-in");
          _this.privacyPopup.classList.add("fade-out");
          _this.privacyPopup.querySelector("#accept-button").removeEventListener("click", removePopup);
          return _this.removeOverlay();
        };
      })(this);
      this.showOverlay(removePopup);
      this.privacyPopup.style.display = "block";
      this.privacyPopup.classList.remove("fade-out");
      this.privacyPopup.classList.add("fade-in");
      return this.privacyPopup.querySelector("#accept-button").addEventListener("click", removePopup);
    };

    Mindmap.prototype.showOverlay = function(callback) {
      var overlay;
      if (callback == null) {
        callback = false;
      }
      overlay = document.createElement("div");
      overlay.id = "overlay";
      overlay.classList.add("fade-in");
      overlay.addEventListener("click", (function(_this) {
        return function() {
          if (callback) {
            callback();
          }
          return _this.removeOverlay();
        };
      })(this));
      return this.content.appendChild(overlay);
    };

    Mindmap.prototype.removeOverlay = function() {
      var overlay;
      overlay = this.content.querySelector("#overlay");
      overlay.classList.remove("fade-in");
      overlay.classList.add("fade-out");
      return overlay.addEventListener("animationend", (function(_this) {
        return function() {
          if (_this.content.contains(overlay)) {
            return _this.content.removeChild(overlay);
          }
        };
      })(this));
    };

    Mindmap.prototype.reset = function() {
      var checkbox, expandButton, i, j, k, len, len1, len2, node, progressBar, ref, ref1, ref2, resetMessage;
      ref = this.container.querySelectorAll(".root-child");
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        ref1 = node.querySelectorAll("input[type='checkbox']");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          checkbox = ref1[j];
          checkbox.checked = false;
        }
        ref2 = node.querySelectorAll(".bar");
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          progressBar = ref2[k];
          progressBar.style.width = "0px";
        }
        if (node.querySelector(".node").classList.contains("active")) {
          node.querySelector(".node-content-header").click();
        }
        expandButton = node.querySelector(".node-expand");
        if (expandButton && expandButton.classList.contains("active")) {
          expandButton.click();
        }
      }
      if (this.data.studies[this.selectedStudy].data.resetMessage && this.data.studies[this.selectedStudy].data.resetMessage.length) {
        resetMessage = document.createElement("span");
        resetMessage.classList.add("textBubbleContent", "standard");
        resetMessage.innerHTML = this.data.studies[this.selectedStudy].data.resetMessage;
        this.updateTextBubbleContent(resetMessage);
      }
      return this.moveToCenter();
    };

    Mindmap.prototype.zoomOut = function() {
      this.zoomFactor = Math.max(this.zoomFactor - 0.25, 0.25);
      return this.animation.scale(this.zoomFactor);
    };

    Mindmap.prototype.zoomIn = function() {
      this.zoomFactor = Math.min(this.zoomFactor + 0.25, 2.0);
      return this.animation.scale(this.zoomFactor);
    };

    return Mindmap;

  })();

  PanHandler = (function() {
    function PanHandler() {
      this.drag = bind(this.drag, this);
      this.listening = false;
      this.dragging = false;
      this.previousMouseX = this.previousMouseY = 0;
      this.content = document.getElementById("content");
      this.mindmap = document.getElementById("mindmap");
      this.speed = 1.0;
    }

    PanHandler.prototype.startListening = function() {
      this.listening = true;
      this.bindMouseDown();
      this.bindMouseUp();
      this.bindTouchDown();
      this.bindTouchUp();
      this.bindMouseMove();
      return this.bindTouchMove();
    };

    PanHandler.prototype.bindMouseDown = function() {
      return this.content.addEventListener("mousedown", (function(_this) {
        return function(event) {
          var overlay;
          overlay = document.getElementById("overlay");
          if (_this.listening && !recursiveHasClass(event.target, "no-drag") && event.target !== overlay && !isDescendant(event.target, overlay)) {
            event.preventDefault();
            _this.speed = 1.0 / window.fg.mindmap.zoomFactor;
            _this.dragging = true;
            _this.previousMouseX = event.clientX;
            return _this.previousMouseY = event.clientY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindMouseUp = function() {
      return this.content.addEventListener("mouseup", (function(_this) {
        return function(event) {
          _this.dragging = false;
          return event.preventDefault();
        };
      })(this));
    };

    PanHandler.prototype.bindTouchDown = function() {
      return this.content.addEventListener("touchstart", (function(_this) {
        return function(event) {
          if (_this.listening && !recursiveHasClass(event.target, "no-drag")) {
            event.preventDefault();
            _this.speed = 1.0 / window.fg.mindmap.zoomFactor;
            _this.dragging = true;
            _this.previousMouseX = event.targetTouches[0].pageX;
            return _this.previousMouseY = event.targetTouches[0].pageY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindTouchUp = function() {
      return this.content.addEventListener("touchup", (function(_this) {
        return function(event) {
          _this.dragging = false;
          return event.preventDefault();
        };
      })(this));
    };

    PanHandler.prototype.bindMouseMove = function() {
      return this.content.addEventListener("mousemove", (function(_this) {
        return function(event) {
          if (_this.dragging && _this.listening) {
            event.preventDefault();
            _this.drag(event.clientX, event.clientY);
            _this.previousMouseX = event.clientX;
            return _this.previousMouseY = event.clientY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindTouchMove = function() {
      return this.content.addEventListener("touchmove", (function(_this) {
        return function(event) {
          if (_this.dragging && _this.listening) {
            event.preventDefault();
            _this.drag(event.targetTouches[0].pageX, event.targetTouches[0].pageY);
            _this.previousMouseX = event.targetTouches[0].pageX;
            return _this.previousMouseY = event.targetTouches[0].pageY;
          }
        };
      })(this));
    };

    PanHandler.prototype.drag = function(currentMouseX, currentMouseY) {
      var movementX, movementY;
      movementX = (currentMouseX - this.previousMouseX) * this.speed;
      movementY = (currentMouseY - this.previousMouseY) * this.speed;
      return fg.mindmap.animation.moveSingleFrame(movementX, movementY);
    };

    return PanHandler;

  })();

  nodeCounter = 0;

  BaseNode = (function() {
    BaseNode.externalClickListeners = [];

    function BaseNode(nodeData1, isRootNode) {
      this.nodeData = nodeData1;
      this.isRootNode = isRootNode != null ? isRootNode : false;
      this.clickListener = bind(this.clickListener, this);
    }


    /* PUBLIC METHODS */

    BaseNode.prototype.build = function() {
      this.createDOMElement();
      this.expanded = false;
      return this;
    };

    BaseNode.prototype.render = function() {
      if (this.isRootNode) {
        this.targetParent = document.getElementById(this.nodeData.side + "branch");
      } else {
        this.targetParent = this.nodeData.parent.querySelector(".children.nested");
      }
      this.targetParent.appendChild(this.html);
      this.nodeData.element = this.html;
      this.setNodeSize();
      return this;
    };

    BaseNode.prototype.renderAnimated = function() {
      this.html.classList.add("animate-in");
      this.render();
      return this;
    };

    BaseNode.prototype.rerender = function() {
      var node, pageNode, swapContents, transitionEnd, wasOpened;
      pageNode = this.targetParent.querySelector("#" + this.html.id);
      node = pageNode.querySelector(".node");
      wasOpened = false;
      swapContents = (function(_this) {
        return function() {
          if (pageNode.querySelector(".node-expand")) {
            _this.html.querySelector(".node-expand").className = pageNode.querySelector(".node-expand").className;
          }
          _this.html.removeChild(_this.html.querySelector(".children.nested"));
          _this.html.appendChild(pageNode.querySelector(".children.nested"));
          pageNode.className = _this.html.className;
          _this.html.querySelector(".node").className = pageNode.querySelector(".node").className;
          pageNode.innerHTML = "";
          pageNode.appendChild(_this.html.querySelector(".node"));
          pageNode.appendChild(_this.html.querySelector(".children.nested"));
          _this.html = pageNode;
          _this.setNodeSize();
          if (wasOpened) {
            return _this.activateNode(_this.html.querySelector(".node"));
          }
        };
      })(this);
      if (node.classList.contains("active")) {
        wasOpened = true;
        transitionEnd = function() {
          node.removeEventListener("transitionend", transitionEnd);
          return swapContents();
        };
        node.addEventListener("transitionend", transitionEnd);
        this.deactivateNode(node);
      } else {
        swapContents();
      }
      return this;
    };

    BaseNode.prototype.addListeners = function() {
      this.html.removeEventListener("click", this.clickListener);
      this.html.addEventListener("click", this.clickListener);
      this.bindHoverListeners();
      if (this.nodeData.children && this.nodeData.children.length) {
        this.bindExpansionHandler();
      }
      return this;
    };

    BaseNode.prototype.focus = function() {
      var expandButton, focusX, focusY, moveX, moveY;
      expandButton = this.html.querySelector(".node-expand");
      focusX = Math.ceil(document.getElementById("content").offsetWidth / 2 - expandButton.offsetWidth / 2);
      focusY = Math.ceil(document.getElementById("content").offsetHeight / 2 - expandButton.offsetHeight / 2);
      moveX = focusX - expandButton.getBoundingClientRect().left;
      moveY = focusY - expandButton.getBoundingClientRect().top;
      fg.mindmap.animation.moveRelative(moveX, moveY, 500);
      return this;
    };

    BaseNode.prototype.blur = function() {
      var expandButton, focusAnimation, focusX, focusY, moveX, moveY;
      if (this.isRootNode) {
        fg.mindmap.moveToCenter();
      } else {
        focusAnimation = new Animation(document.querySelector("#mindmap"));
        expandButton = this.nodeData.parent.querySelector(".node-expand");
        focusX = Math.ceil(document.getElementById("content").offsetWidth / 2 - expandButton.offsetWidth / 2);
        focusY = Math.ceil(document.getElementById("content").offsetHeight / 2 - expandButton.offsetHeight / 2);
        moveX = focusX - expandButton.getBoundingClientRect().left;
        moveY = focusY - expandButton.getBoundingClientRect().top;
        fg.mindmap.animation.moveRelative(moveX, moveY, 500);
      }
      return this;
    };

    BaseNode.prototype.addExpandButton = function() {
      this.html.querySelector(".node-content").appendChild(this.buildExpandButton());
      return this.bindExpansionHandler();
    };


    /* PRIVATE METHODS */

    BaseNode.prototype.activateNode = function(node) {
      var activeContentHeight, contentHeight, contentWidth, message, moveX, moveY, nodeRect, target, targetX, targetY;
      node.classList.add("active");
      target = node.querySelector(".node-content");
      contentWidth = document.getElementById("content").offsetWidth;
      contentHeight = document.getElementById("content").offsetHeight;
      nodeRect = target.getBoundingClientRect();
      if ((nodeRect.x + nodeRect.width) > 0.75 * contentWidth || (nodeRect.y + nodeRect.height) > 0.75 * contentHeight || (nodeRect.x < 0.25 * contentWidth) || (nodeRect.y < 0.25 * contentHeight)) {
        targetX = contentWidth / 2 - nodeRect.width / 2;
        targetY = contentHeight / 2 - nodeRect.height / 2;
        moveX = targetX - nodeRect.left;
        moveY = targetY - nodeRect.top;
        fg.mindmap.animation.moveRelative(moveX, moveY, 500);
      }
      this.originalHeight = getOuterHeight(target);
      activeContentHeight = getOuterHeight(target.getElementsByClassName("node-active-content")[0]);
      node.style.height = (this.originalHeight + activeContentHeight) + "px";
      if (this.nodeData.messages.open && this.nodeData.messages.open.length > 0) {
        message = document.createElement("span");
        message.className = "textBubbleContent standard";
        message.innerHTML = this.nodeData.messages.open;
        return fg.mindmap.updateTextBubbleContent(message);
      }
    };

    BaseNode.prototype.deactivateNode = function(node) {
      var message;
      node.classList.remove("active");
      node.style.height = this.originalHeight + "px";
      this.originalHeight = 0;
      if (this.nodeData.messages.close && this.nodeData.messages.close.length > 0) {
        message = document.createElement("span");
        message.className = "textBubbleContent standard";
        message.innerHTML = this.nodeData.messages.close;
        return fg.mindmap.updateTextBubbleContent(message);
      }
    };

    BaseNode.prototype.onClickEvent = function(event) {
      var node, target;
      if (recursiveHasClass(event.target, "prevent-default")) {
        return;
      }
      if (["A", "BUTTON"].includes(event.target.tagName)) {
        return;
      }
      target = event.target.closest(".node-content");
      if (target === null) {
        return;
      }
      node = target.closest(".node");
      if (node.classList.contains("active")) {
        this.deactivateNode(node);
      } else {
        this.activateNode(node);
      }
    };

    BaseNode.prototype.createDOMElement = function() {
      var activeContent, arrow, chevron, childrenContainer, cleanedName, content, contentContainer, header, name, node, nodeContainer, nodeID, rule, target;
      if (typeof this.html !== "undefined") {
        nodeID = this.html.id;
      } else {
        nodeID = "node-" + (nodeCounter++);
      }
      nodeContainer = document.createElement("li");
      nodeContainer.id = nodeID;
      nodeContainer.classList.add("child-item");
      if (this.isRootNode) {
        nodeContainer.classList.add("root-child");
      }
      node = document.createElement("div");
      node.classList.add("node", "no-drag");
      node.style.backgroundColor = this.nodeData.color;
      contentContainer = document.createElement("div");
      contentContainer.classList.add("node-content-container");
      header = document.createElement("div");
      header.classList.add("node-content-header");
      content = document.createElement("div");
      content.classList.add("node-content");
      name = document.createElement("div");
      name.classList.add("node-name");
      name.innerHTML = this.nodeData.name;
      cleanedName = document.createElement("div");
      cleanedName.innerHTML = this.nodeData.name;
      name.style.width = (measureTextWidth(cleanedName.innerText)) + "px";
      activeContent = document.createElement("div");
      activeContent.classList.add("node-active-content");
      childrenContainer = document.createElement("ol");
      childrenContainer.classList.add("children", "nested");
      if (this.nodeData.children && this.nodeData.children.length) {
        content.appendChild(this.buildExpandButton());
      }
      target = "#" + nodeID + ".child-item,#leftbranch #" + nodeID + ".child-item:before,#rightbranch #" + nodeID + ".child-item:before";
      rule = "border-color: " + this.nodeData.color;
      //if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
      //  document.styleSheets[0].insertRule(target + " {" + rule + "}");
      //} else {
        document.styleSheets[0].addRule(target, rule);
      //}
      arrow = document.createElement("div");
      arrow.classList.add("node-arrow");
      chevron = document.createElement("i");
      chevron.classList.add("fa", "fa-chevron-right");
      arrow.appendChild(chevron);
      header.appendChild(name);
      header.appendChild(arrow);
      contentContainer.appendChild(header);
      contentContainer.appendChild(activeContent);
      content.appendChild(contentContainer);
      node.appendChild(content);
      nodeContainer.appendChild(node);
      nodeContainer.appendChild(childrenContainer);
      this.html = nodeContainer;
    };

    BaseNode.prototype.clickListener = function(event) {
      var blockedByExternalListener, childContainer, externalListener, i, len, ref;
      childContainer = this.html.querySelector(".children.nested");
      if (!isDescendant(event.target, childContainer)) {
        blockedByExternalListener = false;
        if (this.externalClickListeners) {
          ref = this.externalClickListeners;
          for (i = 0, len = ref.length; i < len; i++) {
            externalListener = ref[i];
            blockedByExternalListener |= externalListener(this, event);
          }
        }
        if (!blockedByExternalListener) {
          return this.onClickEvent(event);
        }
      }
    };

    BaseNode.prototype.bindHoverListeners = function() {
      var container, expandButton, node;
      node = this.html.querySelector(".node");
      container = this.html.querySelector(".node-content-container");
      expandButton = this.html.querySelector(".node-expand");
      container.addEventListener("mouseover", (function(_this) {
        return function() {
          return node.classList.add("hover");
        };
      })(this));
      container.addEventListener("mouseout", (function(_this) {
        return function() {
          return node.classList.remove("hover");
        };
      })(this));
      if (expandButton) {
        expandButton.addEventListener("mouseover", (function(_this) {
          return function() {
            return expandButton.classList.add("hover");
          };
        })(this));
        return expandButton.addEventListener("mouseout", (function(_this) {
          return function() {
            return expandButton.classList.remove("hover");
          };
        })(this));
      }
    };

    BaseNode.prototype.bindExpansionHandler = function() {
      var expandButton;
      expandButton = this.html.querySelector(".node-expand");
      return expandButton.addEventListener("click", (function(_this) {
        return function(event) {
          expandButton.classList.toggle("active");
          _this.expanded = !_this.expanded;
          if (_this.expanded) {
            _this.expandChildren();
          } else {
            _this.collapseChildren();
          }
        };
      })(this));
    };

    BaseNode.prototype.expandChildren = function() {
      var child, childNode, i, len, sortedChildren;
      sortedChildren = this.nodeData.children.sort(function(a, b) {
        if (a.weight > b.weight) {
          return 1;
        }
        if (a.weight < b.weight) {
          return -1;
        }
        return 0;
      });
      for (i = 0, len = sortedChildren.length; i < len; i++) {
        child = sortedChildren[i];
        child.parent = this.html;
        child.parentObject = this;
        child.side = this.nodeData.side;
        childNode = new supportedNodeTypes[child.type](child);
        childNode.build().addListeners().renderAnimated();
      }
      return this.focus();
    };

    BaseNode.prototype.collapseChildren = function() {
      var child, childContainer, children, i, index, len;
      childContainer = this.html.querySelector(".children.nested");
      children = childContainer.querySelectorAll(".child-item");
      for (index = i = 0, len = children.length; i < len; index = ++i) {
        child = children[index];
        child.classList.add("animate-out");
        if (index === children.length - 1) {
          child.addEventListener("animationend", function() {
            return childContainer.innerHTML = "";
          });
        }
      }
      return this.blur();
    };

    BaseNode.prototype.setNodeSize = function() {
      return this.html.querySelector(".node").style.width = (this.html.querySelector(".node-content-container").offsetWidth) + "px";
    };

    BaseNode.prototype.buildExpandButton = function() {
      var chevron, nodeExpand, pipe;
      nodeExpand = document.createElement("div");
      nodeExpand.classList.add("node-expand", "prevent-default");
      nodeExpand.style.backgroundColor = this.nodeData.color;
      chevron = document.createElement("div");
      chevron.classList.add("chevron", this.nodeData.side);
      pipe = document.createElement("div");
      pipe.classList.add("pipe");
      nodeExpand.appendChild(chevron);
      nodeExpand.appendChild(pipe);
      return nodeExpand;
    };

    return BaseNode;

  })();

  ChecklistNode = (function(superClass) {
    extend(ChecklistNode, superClass);

    function ChecklistNode() {
      return ChecklistNode.__super__.constructor.apply(this, arguments);
    }

    ChecklistNode.prototype.build = function() {
      var bar, checkbox, checklist, checklistID, checkmark, i, item, label, len, progressbar, ref, rule, target, theorem;
      ChecklistNode.__super__.build.call(this);
      this.html.classList.add("checklist");
      progressbar = document.createElement("div");
      progressbar.classList.add("node-checklist-progressbar");
      bar = document.createElement("div");
      bar.classList.add("bar");
      progressbar.appendChild(bar);
      this.html.querySelector(".node-content-container").appendChild(progressbar);
      checklist = document.createElement("ul");
      checklistID = this.html.id;
      target = "#" + checklistID + " .checkmark:after";
      rule = "border-style:solid!important;border-color:" + this.nodeData.color + "!important;border-image:initial!important;border-width: 0 3px 3px 0 !important;";
      if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
        document.styleSheets[0].insertRule(target + " {" + rule + "}");
      } else {
        document.styleSheets[0].addRule(target, rule);
      }
      ref = this.nodeData.data.theorems;
      for (i = 0, len = ref.length; i < len; i++) {
        theorem = ref[i];
        item = document.createElement("li");
        item.classList.add("checkbox-item", "prevent-default");
        label = document.createElement("label");
        label.classList.add("container");
        label.innerHTML = theorem;
        checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkmark = document.createElement("div");
        checkmark.classList.add("checkmark", checklistID);
        label.appendChild(checkbox);
        label.appendChild(checkmark);
        item.appendChild(label);
        checklist.appendChild(item);
      }
      this.html.querySelector(".node-active-content").appendChild(checklist);
      return this;
    };

    ChecklistNode.prototype.onClickEvent = function(event) {
      var allCheckboxes, bar, checkedCheckboxes, expandButton, feedback, i, len, parent, percentage, percentageChecked, ref, results, target;
      ChecklistNode.__super__.onClickEvent.call(this, event);
      if (!recursiveHasClass(event.target, "checkbox-item")) {
        return;
      }
      target = event.target;
      parent = target.closest(".node");
      bar = parent.querySelector(".bar");
      checkedCheckboxes = parent.querySelectorAll("input[type='checkbox']:checked").length;
      allCheckboxes = parent.querySelectorAll("input[type='checkbox']").length;
      percentageChecked = Math.ceil(checkedCheckboxes / allCheckboxes * 100);
      bar.style.width = percentageChecked + "%";
      if (checkedCheckboxes >= 2) {
        expandButton = parent.querySelector(".node-expand");
        if (!expandButton.classList.contains("active")) {
          expandButton.click();
        }
      }
      ref = Object.keys(this.nodeData.data.feedback).reverse();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        percentage = ref[i];
        if (percentageChecked >= percentage) {
          feedback = document.createElement("span");
          feedback.classList.add("textBubbleContent", "standard");
          feedback.innerHTML = this.nodeData.data.feedback[percentage];
          fg.mindmap.updateTextBubbleContent(feedback);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return ChecklistNode;

  })(BaseNode);

  TextNode = (function(superClass) {
    extend(TextNode, superClass);

    function TextNode() {
      return TextNode.__super__.constructor.apply(this, arguments);
    }

    TextNode.prototype.build = function() {
      TextNode.__super__.build.call(this);
      this.html.classList.add("text");
      this.html.querySelector(".node-active-content").innerHTML = this.nodeData.data.text;
      return this;
    };

    return TextNode;

  })(BaseNode);

  VideoNode = (function(superClass) {
    extend(VideoNode, superClass);

    function VideoNode() {
      return VideoNode.__super__.constructor.apply(this, arguments);
    }

    VideoNode.prototype.build = function() {
      var text, video;
      VideoNode.__super__.build.call(this);
      this.html.classList.add("video");
      if (this.nodeData.data.text) {
        text = document.createElement("div");
        text.classList.add("text");
        text.innerHTML = this.nodeData.data.text;
        this.html.querySelector(".node-active-content").appendChild(text);
      }
      if (this.nodeData.data.url) {
        this.open = false;
        video = document.createElement("iframe");
        video.frameborder = 0;
        video.setAttribute("allowfullscreen", "");
        video.setAttribute("mozallowfullscreen", "");
        video.setAttribute("msallowfullscreen", "");
        video.setAttribute("oallowfullscreen", "");
        video.setAttribute("webkitallowfullscreen", "");
        video.classList.add("frame");
        this.html.querySelector(".node-active-content").appendChild(video);
      }
      return this;
    };

    VideoNode.prototype.activateNode = function() {
      VideoNode.__super__.activateNode.call(this, this.html.querySelector(".node"));
      if (!this.open) {
        this.html.querySelector("iframe").src = this.nodeData.data.url;
        return this.open = true;
      }
    };

    return VideoNode;

  })(BaseNode);

  supportedNodeTypes = {
    "checklist": ChecklistNode,
    "text": TextNode,
    "video": VideoNode
  };

  window.fg = {};

  document.addEventListener("DOMContentLoaded", function(event) {
    fg.mindmap = new Mindmap;
    fg.panHandler = new PanHandler;
    fg.clickHandler = new ClickHandler;
    fg.panHandler.startListening();
    return fg.clickHandler.startListening();
  });

}).call(this);
