// Generated by CoffeeScript 1.12.7
(function() {
  var Animation, BaseNode, ChecklistNode, ClickHandler, EDITABLE_PROPERTIES, Editor, Mindmap, NORMALIZED_NAMES, PROPERTY_TYPES, PanHandler, SideMenu, TextNode, VideoNode, getOuterHeight, isDescendant, measureTextWidth, nodeCounter, recursiveHasClass, supportedNodeTypes, tagCleanup,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Animation = (function() {
    function Animation(element1) {
      this.element = element1;
      this.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }

    Animation.prototype.move = function(fromX, fromY, toX, toY, durationMS) {
      var curS, step, steps;
      steps = durationMS / 16;
      curS = 0;
      step = (function(_this) {
        return function() {
          curS += Math.PI / steps;
          _this.matrix[12] += ((toX - fromX) / steps) * (Math.pow(Math.sin(curS), 2)) * 2;
          _this.matrix[13] += ((toY - fromY) / steps) * (Math.pow(Math.sin(curS), 2)) * 2;
          _this.updateTransformationMatrix();
          if (curS < Math.PI) {
            return requestAnimationFrame(step);
          }
        };
      })(this);
      return requestAnimationFrame(step);
    };

    Animation.prototype.moveRelative = function(moveX, moveY, duration) {
      return this.move(this.matrix[12], this.matrix[13], this.matrix[12] + moveX, this.matrix[13] + moveY, duration);
    };

    Animation.prototype.scale = function(scale) {
      var curS, step, steps;
      steps = 400 / 16;
      curS = 0;
      step = (function(_this) {
        return function() {
          curS += Math.PI / steps;
          _this.matrix[0] += (scale - _this.matrix[0]) / steps;
          _this.matrix[5] += (scale - _this.matrix[0]) / steps;
          _this.updateTransformationMatrix();
          if (curS < Math.PI) {
            return requestAnimationFrame(step);
          }
        };
      })(this);
      return requestAnimationFrame(step);
    };

    Animation.prototype.moveSingleFrame = function(moveX, moveY) {
      var moveAnimation;
      moveAnimation = (function(_this) {
        return function() {
          _this.matrix[12] += moveX;
          _this.matrix[13] += moveY;
          return _this.updateTransformationMatrix();
        };
      })(this);
      return requestAnimationFrame(moveAnimation);
    };

    Animation.prototype.updateTransformationMatrix = function() {
      return this.element.style.transform = "matrix3d(" + this.matrix.join(',') + ")";
    };

    return Animation;

  })();

  ClickHandler = (function() {
    function ClickHandler() {
      this.resetPositionButton = document.getElementById("reset-position-button");
      this.privacyButton = document.getElementById("privacy-button");
      this.resetButton = document.getElementById("reset-button");
      this.zoomInButton = document.getElementById("zoom-in-button");
      this.zoomOutButton = document.getElementById("zoom-out-button");
    }

    ClickHandler.prototype.startListening = function() {
      this.bindPrivacyButton();
      this.bindResetButton();
      this.bindResetPositionButton();
      return this.bindZoomButtons();
    };

    ClickHandler.prototype.bindZoomButtons = function() {
      this.zoomInButton.addEventListener("click", function() {
        return fg.mindmap.zoomIn();
      });
      return this.zoomOutButton.addEventListener("click", function() {
        return fg.mindmap.zoomOut();
      });
    };

    ClickHandler.prototype.bindPrivacyButton = function() {
      return this.privacyButton.addEventListener("click", (function(_this) {
        return function() {
          return fg.mindmap.showPrivacyPopup();
        };
      })(this));
    };

    ClickHandler.prototype.bindResetButton = function() {
      return this.resetButton.addEventListener("click", function() {
        return fg.mindmap.reset();
      });
    };

    ClickHandler.prototype.bindResetPositionButton = function() {
      return this.resetPositionButton.addEventListener("click", function() {
        return fg.mindmap.moveToCenter();
      });
    };

    return ClickHandler;

  })();

  recursiveHasClass = function(element, className) {
    while (element) {
      if (element.classList && element.classList.contains(className)) {
        return true;
      }
      element = element.parentNode;
    }
    return false;
  };

  getOuterHeight = function(element) {
    var margin, styles;
    styles = window.getComputedStyle(element);
    margin = parseFloat(styles["marginTop"]) + parseFloat(styles["marginBottom"]);
    return Math.ceil(element.offsetHeight + margin);
  };

  isDescendant = function(a, b) {
    var node;
    node = a.parentNode;
    while (node !== null) {
      if (node === b) {
        return true;
      }
      node = node.parentNode;
    }
    return false;
  };

  measureTextWidth = function(text) {
    var ruler;
    ruler = document.querySelector("#text-ruler");
    ruler.innerHTML = text;
    return ruler.offsetWidth;
  };

  tagCleanup = function(html) {
    return html.replace(/<\/?(p|div|span).*?>/g, "");
  };

  Mindmap = (function() {
    function Mindmap(callback) {
      if (callback == null) {
        callback = false;
      }
      this.container = document.getElementById("mindmap");
      this.rootNode = document.getElementById("rootnode");
      this.content = document.getElementById("content");
      this.privacyPopup = document.getElementById("privacy-popup");
      this.animation = new Animation(this.container);
      this.zoomFactor = 1.0;
      this.loadData(callback);
    }

    Mindmap.prototype.loadData = function(callback) {
      var httpRequest;
      httpRequest = new XMLHttpRequest();
      httpRequest.onreadystatechange = (function(_this) {
        return function() {
          if (httpRequest.readyState === XMLHttpRequest.DONE) {
            if (httpRequest.status === 200) {
              _this.data = JSON.parse(httpRequest.responseText);
              _this.createStudySelectBalloon();
              if (callback) {
                return callback();
              }
            } else {
              _this.data = {};
              return console.error("Couldn't load the map data!");
            }
          }
        };
      })(this);
      httpRequest.open("GET", "data/content.json");
      return httpRequest.send();
    };

    Mindmap.prototype.updateTextBubbleContent = function(newContent) {
      var fadeInAnimation, fadeOutAnimation, i, len, newBubble, oldBubble, ref;
      ref = document.getElementsByClassName("textbubble");
      for (i = 0, len = ref.length; i < len; i++) {
        oldBubble = ref[i];
        if (oldBubble.innerText.replace(/^\s+|\s+|\n+$/gm, '') === newContent.innerText.replace(/^\s+|\s+|\n+$/gm, '')) {
          return;
        }
        oldBubble.addEventListener("animationend", function() {
          if (oldBubble.parentElement) {
            return oldBubble.parentElement.removeChild(oldBubble);
          }
        });
        oldBubble.addEventListener("webkitAnimationEnd", function() {
          if (oldBubble.parentElement) {
            return oldBubble.parentElement.removeChild(oldBubble);
          }
        });
        oldBubble.classList.add("bubbleFadeOut");
      }
      fadeOutAnimation = new Animation(oldBubble);
      newBubble = document.createElement("div");
      newBubble.className = "textbubble bubbleFadeIn";
      newBubble.appendChild(newContent);
      fadeInAnimation = new Animation(newBubble);
      return this.rootNode.appendChild(newBubble);
    };

    Mindmap.prototype.createStudySelectBalloon = function() {
      var disabledPlaceholder, i, len, ref, selectStudyLabel, studies, study, studySelectBalloon, studySelectContainer, yearSelectContainer;
      studySelectBalloon = document.createElement("span");
      studySelectBalloon.className = "textBubbleContent studySelect no-drag";
      selectStudyLabel = document.createElement("label");
      selectStudyLabel.innerHTML = "Kies je studie en studiejaar:";
      studySelectBalloon.appendChild(selectStudyLabel);
      studySelectContainer = document.createElement("span");
      studySelectContainer.className = "dropdown";
      this.studySelect = document.createElement("select");
      this.studySelect.id = "studySelect";
      disabledPlaceholder = new Option("Selecteer je studie", null, true, true);
      disabledPlaceholder.disabled = true;
      disabledPlaceholder.classList.add("placeholder");
      this.studySelect.appendChild(disabledPlaceholder);
      studySelectContainer.appendChild(this.studySelect);
      studySelectBalloon.appendChild(studySelectContainer);
      yearSelectContainer = document.createElement("span");
      yearSelectContainer.className = "dropdown";
      this.yearSelect = document.createElement("select");
      this.yearSelect.id = "yearSelect";
      this.yearSelect.disabled = true;
      disabledPlaceholder = new Option("Selecteer je studiejaar", null, true, true);
      disabledPlaceholder.classList.add("placeholder");
      disabledPlaceholder.disabled = true;
      this.yearSelect.appendChild(disabledPlaceholder);
      yearSelectContainer.appendChild(this.yearSelect);
      studySelectBalloon.appendChild(yearSelectContainer);
      this.studySelectButton = document.createElement("button");
      this.studySelectButton.id = "studySelectButton";
      this.studySelectButton.innerHTML = "OK";
      this.studySelectButton.disabled = true;
      studySelectBalloon.appendChild(this.studySelectButton);
      studies = Object.keys(this.data.studies);
      this.sortedStudies = studies.sort((function(_this) {
        return function(a, b) {
          var weightA, weightB;
          weightA = parseInt(_this.data.studies[a].data.weight);
          weightB = parseInt(_this.data.studies[b].data.weight);
          if (weightA > weightB) {
            return 1;
          }
          if (weightA < weightB) {
            return -1;
          }
          return 0;
        };
      })(this));
      ref = this.sortedStudies;
      for (i = 0, len = ref.length; i < len; i++) {
        study = ref[i];
        this.studySelect.appendChild(new Option(study, studies.indexOf(study)));
      }
      this.bindStudySelect();
      return this.updateTextBubbleContent(studySelectBalloon);
    };

    Mindmap.prototype.bindStudySelect = function() {
      var studyWeight;
      studyWeight = null;
      this.studySelect.addEventListener("change", (function(_this) {
        return function() {
          var i, j, len, len1, oldOption, ref, sortedYearOptions, year, yearOptions, years;
          _this.studySelectButton.disabled = true;
          studyWeight = parseInt(_this.studySelect.value) + 1;
          years = _this.data.studies[Object.keys(window.fg.mindmap.data.studies).find(key => window.fg.mindmap.data.studies[key].data.weight == studyWeight)].years;
          yearOptions = Object.keys(years);
          sortedYearOptions = yearOptions.concat().sort(function(a, b) {
            var weightA, weightB;
            weightA = parseInt(years[a].data.weight);
            weightB = parseInt(years[b].data.weight);
            if (weightA > weightB) {
              return 1;
            }
            if (weightA < weightB) {
              return -1;
            }
            return 0;
          });
          _this.yearSelect.disabled = yearOptions.length === 0;
          ref = _this.yearSelect.querySelectorAll("option:not([class='placeholder'])");
          for (i = 0, len = ref.length; i < len; i++) {
            oldOption = ref[i];
            _this.yearSelect.removeChild(oldOption);
          }
          for (j = 0, len1 = sortedYearOptions.length; j < len1; j++) {
            year = sortedYearOptions[j];
            _this.yearSelect.add(new Option(year, yearOptions.indexOf(year)));
          }
          return _this.yearSelect.value = null;
        };
      })(this));
      this.yearSelect.addEventListener("change", (function(_this) {
        return function() {
          return _this.studySelectButton.disabled = false;
        };
      })(this));
      return this.studySelectButton.addEventListener("click", (function(_this) {
        return function() {
          _this.selectedStudy = Object.keys(window.fg.mindmap.data.studies).find(key => window.fg.mindmap.data.studies[key].data.weight == studyWeight);
          _this.selectedYear = Object.keys(_this.data.studies[_this.selectedStudy]["years"])[_this.yearSelect.value];
          _this.mindmapData = _this.data.studies[_this.selectedStudy]["years"][_this.selectedYear];
          return _this.renderMindMap();
        };
      })(this));
    };

    Mindmap.prototype.renderMindMap = function() {
      var i, len, node, nodeData, sortedNodes, welcomeBubble;
      welcomeBubble = document.createElement("span");
      welcomeBubble.className = "textBubbleContent standard";
      welcomeBubble.innerHTML = this.data.studies[this.selectedStudy].data.welcomeMessage;
      this.updateTextBubbleContent(welcomeBubble);
      sortedNodes = this.mindmapData.nodes.sort(function(a, b) {
        var weightA, weightB;
        weightA = parseInt(a.weight);
        weightB = parseInt(b.weight);
        if (weightA > weightB) {
          return 1;
        }
        if (weightA < weightB) {
          return -1;
        }
        return 0;
      });
      for (i = 0, len = sortedNodes.length; i < len; i++) {
        nodeData = sortedNodes[i];
        node = new supportedNodeTypes[nodeData.type](nodeData, true);
        node.build().addListeners().render();
      }
      document.getElementById("reset-button").style.display = "inline-block";
      document.getElementById("reset-button").classList.add("fade-in");
      return setTimeout(((function(_this) {
        return function() {
          var hint;
          hint = document.querySelector("#hint");
          hint.classList.add("fade-in");
          return setTimeout((function() {
            hint.classList.remove("fade-in");
            hint.classList.add("fade-out");
            return hint.addEventListener("animationend", function() {
              return hint.parentElement.removeChild(hint);
            });
          }), 7000);
        };
      })(this)), 1000);
    };

    Mindmap.prototype.moveToCenter = function() {
      var moveX, moveY, rootCurrentX, rootCurrentY, rootTargetX, rootTargetY;
      rootTargetX = Math.ceil(document.getElementById("content").offsetWidth / 2 - this.rootNode.offsetWidth / 2);
      rootTargetY = Math.ceil(document.getElementById("content").offsetHeight / 2 - this.rootNode.offsetHeight / 2);
      rootCurrentX = Math.ceil(this.rootNode.getBoundingClientRect().left);
      rootCurrentY = Math.ceil(this.rootNode.getBoundingClientRect().top);
      moveX = rootTargetX - rootCurrentX;
      moveY = rootTargetY - rootCurrentY;
      return this.animation.moveRelative(moveX, moveY, 500);
    };

    Mindmap.prototype.showPrivacyPopup = function() {
      var removePopup;
      removePopup = (function(_this) {
        return function() {
          var animationEnd;
          animationEnd = function() {
            _this.privacyPopup.style.display = "none";
            return _this.privacyPopup.removeEventListener("animationend", animationEnd);
          };
          _this.privacyPopup.addEventListener("animationend", animationEnd);
          _this.privacyPopup.classList.remove("fade-in");
          _this.privacyPopup.classList.add("fade-out");
          _this.privacyPopup.querySelector("#accept-button").removeEventListener("click", removePopup);
          return _this.removeOverlay();
        };
      })(this);
      this.showOverlay(removePopup);
      this.privacyPopup.style.display = "block";
      this.privacyPopup.classList.remove("fade-out");
      this.privacyPopup.classList.add("fade-in");
      return this.privacyPopup.querySelector("#accept-button").addEventListener("click", removePopup);
    };

    Mindmap.prototype.showOverlay = function(callback) {
      var overlay;
      if (callback == null) {
        callback = false;
      }
      overlay = document.createElement("div");
      overlay.id = "overlay";
      overlay.classList.add("fade-in");
      overlay.addEventListener("click", (function(_this) {
        return function() {
          if (callback) {
            callback();
          }
          return _this.removeOverlay();
        };
      })(this));
      return this.content.appendChild(overlay);
    };

    Mindmap.prototype.removeOverlay = function() {
      var overlay;
      overlay = this.content.querySelector("#overlay");
      overlay.classList.remove("fade-in");
      overlay.classList.add("fade-out");
      return overlay.addEventListener("animationend", (function(_this) {
        return function() {
          if (_this.content.contains(overlay)) {
            return _this.content.removeChild(overlay);
          }
        };
      })(this));
    };

    Mindmap.prototype.reset = function() {
      var checkbox, expandButton, i, j, k, len, len1, len2, node, progressBar, ref, ref1, ref2, resetMessage;
      ref = this.container.querySelectorAll(".root-child");
      for (i = 0, len = ref.length; i < len; i++) {
        node = ref[i];
        ref1 = node.querySelectorAll("input[type='checkbox']");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          checkbox = ref1[j];
          checkbox.checked = false;
        }
        ref2 = node.querySelectorAll(".bar");
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          progressBar = ref2[k];
          progressBar.style.width = "0px";
        }
        if (node.querySelector(".node").classList.contains("active")) {
          node.querySelector(".node-content-header").click();
        }
        expandButton = node.querySelector(".node-expand");
        if (expandButton && expandButton.classList.contains("active")) {
          expandButton.click();
        }
      }
      if (this.data.studies[this.selectedStudy].data.resetMessage && this.data.studies[this.selectedStudy].data.resetMessage.length) {
        resetMessage = document.createElement("span");
        resetMessage.classList.add("textBubbleContent", "standard");
        resetMessage.innerHTML = this.data.studies[this.selectedStudy].data.resetMessage;
        this.updateTextBubbleContent(resetMessage);
      }
      return this.moveToCenter();
    };

    Mindmap.prototype.zoomOut = function() {
      this.zoomFactor = Math.max(this.zoomFactor - 0.25, 0.25);
      return this.animation.scale(this.zoomFactor);
    };

    Mindmap.prototype.zoomIn = function() {
      this.zoomFactor = Math.min(this.zoomFactor + 0.25, 2.0);
      return this.animation.scale(this.zoomFactor);
    };

    return Mindmap;

  })();

  PanHandler = (function() {
    function PanHandler() {
      this.drag = bind(this.drag, this);
      this.listening = false;
      this.dragging = false;
      this.previousMouseX = this.previousMouseY = 0;
      this.content = document.getElementById("content");
      this.mindmap = document.getElementById("mindmap");
      this.speed = 1.0;
    }

    PanHandler.prototype.startListening = function() {
      this.listening = true;
      this.bindMouseDown();
      this.bindMouseUp();
      this.bindTouchDown();
      this.bindTouchUp();
      this.bindMouseMove();
      return this.bindTouchMove();
    };

    PanHandler.prototype.bindMouseDown = function() {
      return this.content.addEventListener("mousedown", (function(_this) {
        return function(event) {
          var overlay;
          overlay = document.getElementById("overlay");
          if (_this.listening && !recursiveHasClass(event.target, "no-drag") && event.target !== overlay && !isDescendant(event.target, overlay)) {
            event.preventDefault();
            _this.speed = 1.0 / window.fg.mindmap.zoomFactor;
            _this.dragging = true;
            _this.previousMouseX = event.clientX;
            return _this.previousMouseY = event.clientY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindMouseUp = function() {
      return this.content.addEventListener("mouseup", (function(_this) {
        return function(event) {
          _this.dragging = false;
          return event.preventDefault();
        };
      })(this));
    };

    PanHandler.prototype.bindTouchDown = function() {
      return this.content.addEventListener("touchstart", (function(_this) {
        return function(event) {
          if (_this.listening && !recursiveHasClass(event.target, "no-drag")) {
            event.preventDefault();
            _this.speed = 1.0 / window.fg.mindmap.zoomFactor;
            _this.dragging = true;
            _this.previousMouseX = event.targetTouches[0].pageX;
            return _this.previousMouseY = event.targetTouches[0].pageY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindTouchUp = function() {
      return this.content.addEventListener("touchup", (function(_this) {
        return function(event) {
          _this.dragging = false;
          return event.preventDefault();
        };
      })(this));
    };

    PanHandler.prototype.bindMouseMove = function() {
      return this.content.addEventListener("mousemove", (function(_this) {
        return function(event) {
          if (_this.dragging && _this.listening) {
            event.preventDefault();
            _this.drag(event.clientX, event.clientY);
            _this.previousMouseX = event.clientX;
            return _this.previousMouseY = event.clientY;
          }
        };
      })(this));
    };

    PanHandler.prototype.bindTouchMove = function() {
      return this.content.addEventListener("touchmove", (function(_this) {
        return function(event) {
          if (_this.dragging && _this.listening) {
            event.preventDefault();
            _this.drag(event.targetTouches[0].pageX, event.targetTouches[0].pageY);
            _this.previousMouseX = event.targetTouches[0].pageX;
            return _this.previousMouseY = event.targetTouches[0].pageY;
          }
        };
      })(this));
    };

    PanHandler.prototype.drag = function(currentMouseX, currentMouseY) {
      var movementX, movementY;
      movementX = (currentMouseX - this.previousMouseX) * this.speed;
      movementY = (currentMouseY - this.previousMouseY) * this.speed;
      return fg.mindmap.animation.moveSingleFrame(movementX, movementY);
    };

    return PanHandler;

  })();

  nodeCounter = 0;

  BaseNode = (function() {
    BaseNode.externalClickListeners = [];

    function BaseNode(nodeData1, isRootNode1) {
      this.nodeData = nodeData1;
      this.isRootNode = isRootNode1 != null ? isRootNode1 : false;
      this.clickListener = bind(this.clickListener, this);
    }


    /* PUBLIC METHODS */

    BaseNode.prototype.build = function() {
      this.createDOMElement();
      this.expanded = false;
      return this;
    };

    BaseNode.prototype.render = function() {
      if (this.isRootNode) {
        this.targetParent = document.getElementById(this.nodeData.side + "branch");
      } else {
        this.targetParent = this.nodeData.parent.querySelector(".children.nested");
      }
      this.targetParent.appendChild(this.html);
      this.nodeData.element = this.html;
      this.setNodeSize();
      return this;
    };

    BaseNode.prototype.renderAnimated = function() {
      this.html.classList.add("animate-in");
      this.render();
      return this;
    };

    BaseNode.prototype.rerender = function() {
      var node, pageNode, swapContents, transitionEnd, wasOpened;
      pageNode = this.targetParent.querySelector("#" + this.html.id);
      node = pageNode.querySelector(".node");
      wasOpened = false;
      swapContents = (function(_this) {
        return function() {
          if (pageNode.querySelector(".node-expand")) {
            _this.html.querySelector(".node-expand").className = pageNode.querySelector(".node-expand").className;
          }
          _this.html.removeChild(_this.html.querySelector(".children.nested"));
          _this.html.appendChild(pageNode.querySelector(".children.nested"));
          pageNode.className = _this.html.className;
          _this.html.querySelector(".node").className = pageNode.querySelector(".node").className;
          pageNode.innerHTML = "";
          pageNode.appendChild(_this.html.querySelector(".node"));
          pageNode.appendChild(_this.html.querySelector(".children.nested"));
          _this.html = pageNode;
          _this.setNodeSize();
          if (wasOpened) {
            return _this.activateNode(_this.html.querySelector(".node"));
          }
        };
      })(this);
      if (node.classList.contains("active")) {
        wasOpened = true;
        transitionEnd = function() {
          node.removeEventListener("transitionend", transitionEnd);
          return swapContents();
        };
        node.addEventListener("transitionend", transitionEnd);
        this.deactivateNode(node);
      } else {
        swapContents();
      }
      return this;
    };

    BaseNode.prototype.addListeners = function() {
      this.html.removeEventListener("click", this.clickListener);
      this.html.addEventListener("click", this.clickListener);
      this.bindHoverListeners();
      if (this.nodeData.children && this.nodeData.children.length) {
        this.bindExpansionHandler();
      }
      return this;
    };

    BaseNode.prototype.focus = function() {
      var expandButton, focusX, focusY, moveX, moveY;
      expandButton = this.html.querySelector(".node-expand");
      focusX = Math.ceil(document.getElementById("content").offsetWidth / 2 - expandButton.offsetWidth / 2);
      focusY = Math.ceil(document.getElementById("content").offsetHeight / 2 - expandButton.offsetHeight / 2);
      moveX = focusX - expandButton.getBoundingClientRect().left;
      moveY = focusY - expandButton.getBoundingClientRect().top;
      fg.mindmap.animation.moveRelative(moveX, moveY, 500);
      return this;
    };

    BaseNode.prototype.blur = function() {
      var expandButton, focusAnimation, focusX, focusY, moveX, moveY;
      if (this.isRootNode) {
        fg.mindmap.moveToCenter();
      } else {
        focusAnimation = new Animation(document.querySelector("#mindmap"));
        expandButton = this.nodeData.parent.querySelector(".node-expand");
        focusX = Math.ceil(document.getElementById("content").offsetWidth / 2 - expandButton.offsetWidth / 2);
        focusY = Math.ceil(document.getElementById("content").offsetHeight / 2 - expandButton.offsetHeight / 2);
        moveX = focusX - expandButton.getBoundingClientRect().left;
        moveY = focusY - expandButton.getBoundingClientRect().top;
        fg.mindmap.animation.moveRelative(moveX, moveY, 500);
      }
      return this;
    };

    BaseNode.prototype.addExpandButton = function() {
      this.html.querySelector(".node-content").appendChild(this.buildExpandButton());
      return this.bindExpansionHandler();
    };


    /* PRIVATE METHODS */

    BaseNode.prototype.activateNode = function(node) {
      var activeContentHeight, contentHeight, contentWidth, message, moveX, moveY, nodeRect, target, targetX, targetY;
      node.classList.add("active");
      target = node.querySelector(".node-content");
      contentWidth = document.getElementById("content").offsetWidth;
      contentHeight = document.getElementById("content").offsetHeight;
      nodeRect = target.getBoundingClientRect();
      if ((nodeRect.x + nodeRect.width) > 0.75 * contentWidth || (nodeRect.y + nodeRect.height) > 0.75 * contentHeight || (nodeRect.x < 0.25 * contentWidth) || (nodeRect.y < 0.25 * contentHeight)) {
        targetX = contentWidth / 2 - nodeRect.width / 2;
        targetY = contentHeight / 2 - nodeRect.height / 2;
        moveX = targetX - nodeRect.left;
        moveY = targetY - nodeRect.top;
        fg.mindmap.animation.moveRelative(moveX, moveY, 500);
      }
      this.originalHeight = getOuterHeight(target);
      activeContentHeight = getOuterHeight(target.getElementsByClassName("node-active-content")[0]);
      node.style.height = (this.originalHeight + activeContentHeight) + "px";
      if (this.nodeData.messages.open && this.nodeData.messages.open.length > 0) {
        message = document.createElement("span");
        message.className = "textBubbleContent standard";
        message.innerHTML = this.nodeData.messages.open;
        return fg.mindmap.updateTextBubbleContent(message);
      }
    };

    BaseNode.prototype.deactivateNode = function(node) {
      var message;
      node.classList.remove("active");
      node.style.height = this.originalHeight + "px";
      this.originalHeight = 0;
      if (this.nodeData.messages.close && this.nodeData.messages.close.length > 0) {
        message = document.createElement("span");
        message.className = "textBubbleContent standard";
        message.innerHTML = this.nodeData.messages.close;
        return fg.mindmap.updateTextBubbleContent(message);
      }
    };

    BaseNode.prototype.onClickEvent = function(event) {
      var node, target;
      if (recursiveHasClass(event.target, "prevent-default")) {
        return;
      }
      if (["A", "BUTTON"].includes(event.target.tagName)) {
        return;
      }
      target = event.target.closest(".node-content");
      if (target === null) {
        return;
      }
      node = target.closest(".node");
      if (node.classList.contains("active")) {
        this.deactivateNode(node);
      } else {
        this.activateNode(node);
      }
    };

    BaseNode.prototype.createDOMElement = function() {
      var activeContent, arrow, chevron, childrenContainer, cleanedName, content, contentContainer, header, name, node, nodeContainer, nodeID, rule, target;
      if (typeof this.html !== "undefined") {
        nodeID = this.html.id;
      } else {
        nodeID = "node-" + (nodeCounter++);
      }
      nodeContainer = document.createElement("li");
      nodeContainer.id = nodeID;
      nodeContainer.classList.add("child-item");
      if (this.isRootNode) {
        nodeContainer.classList.add("root-child");
      }
      node = document.createElement("div");
      node.classList.add("node", "no-drag");
      node.style.backgroundColor = this.nodeData.color;
      contentContainer = document.createElement("div");
      contentContainer.classList.add("node-content-container");
      header = document.createElement("div");
      header.classList.add("node-content-header");
      content = document.createElement("div");
      content.classList.add("node-content");
      name = document.createElement("div");
      name.classList.add("node-name");
      name.innerHTML = this.nodeData.name;
      cleanedName = document.createElement("div");
      cleanedName.innerHTML = this.nodeData.name;
      name.style.width = (measureTextWidth(cleanedName.innerText)) + "px";
      activeContent = document.createElement("div");
      activeContent.classList.add("node-active-content");
      childrenContainer = document.createElement("ol");
      childrenContainer.classList.add("children", "nested");
      if (this.nodeData.children && this.nodeData.children.length) {
        content.appendChild(this.buildExpandButton());
      }
      target = "#" + nodeID + ".child-item,#leftbranch #" + nodeID + ".child-item:before,#rightbranch #" + nodeID + ".child-item:before";
      rule = "border-color: " + this.nodeData.color;
      if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
        document.styleSheets[0].insertRule(target + " {" + rule + "}");
      } else {
        document.styleSheets[0].addRule(target, rule);
      }
      arrow = document.createElement("div");
      arrow.classList.add("node-arrow");
      chevron = document.createElement("i");
      chevron.classList.add("fa", "fa-chevron-right");
      arrow.appendChild(chevron);
      header.appendChild(name);
      header.appendChild(arrow);
      contentContainer.appendChild(header);
      contentContainer.appendChild(activeContent);
      content.appendChild(contentContainer);
      node.appendChild(content);
      nodeContainer.appendChild(node);
      nodeContainer.appendChild(childrenContainer);
      this.html = nodeContainer;
    };

    BaseNode.prototype.clickListener = function(event) {
      var blockedByExternalListener, childContainer, externalListener, i, len, ref;
      childContainer = this.html.querySelector(".children.nested");
      if (!isDescendant(event.target, childContainer)) {
        blockedByExternalListener = false;
        if (this.externalClickListeners) {
          ref = this.externalClickListeners;
          for (i = 0, len = ref.length; i < len; i++) {
            externalListener = ref[i];
            blockedByExternalListener |= externalListener(this, event);
          }
        }
        if (!blockedByExternalListener) {
          return this.onClickEvent(event);
        }
      }
    };

    BaseNode.prototype.bindHoverListeners = function() {
      var container, expandButton, node;
      node = this.html.querySelector(".node");
      container = this.html.querySelector(".node-content-container");
      expandButton = this.html.querySelector(".node-expand");
      container.addEventListener("mouseover", (function(_this) {
        return function() {
          return node.classList.add("hover");
        };
      })(this));
      container.addEventListener("mouseout", (function(_this) {
        return function() {
          return node.classList.remove("hover");
        };
      })(this));
      if (expandButton) {
        expandButton.addEventListener("mouseover", (function(_this) {
          return function() {
            return expandButton.classList.add("hover");
          };
        })(this));
        return expandButton.addEventListener("mouseout", (function(_this) {
          return function() {
            return expandButton.classList.remove("hover");
          };
        })(this));
      }
    };

    BaseNode.prototype.bindExpansionHandler = function() {
      var expandButton;
      expandButton = this.html.querySelector(".node-expand");
      return expandButton.addEventListener("click", (function(_this) {
        return function(event) {
          expandButton.classList.toggle("active");
          _this.expanded = !_this.expanded;
          if (_this.expanded) {
            _this.expandChildren();
          } else {
            _this.collapseChildren();
          }
        };
      })(this));
    };

    BaseNode.prototype.expandChildren = function() {
      var child, childNode, i, len, sortedChildren;
      sortedChildren = this.nodeData.children.sort(function(a, b) {
        if (a.weight > b.weight) {
          return 1;
        }
        if (a.weight < b.weight) {
          return -1;
        }
        return 0;
      });
      for (i = 0, len = sortedChildren.length; i < len; i++) {
        child = sortedChildren[i];
        child.parent = this.html;
        child.parentObject = this;
        child.side = this.nodeData.side;
        childNode = new supportedNodeTypes[child.type](child);
        childNode.build().addListeners().renderAnimated();
      }
      return this.focus();
    };

    BaseNode.prototype.collapseChildren = function() {
      var child, childContainer, children, i, index, len;
      childContainer = this.html.querySelector(".children.nested");
      children = childContainer.querySelectorAll(".child-item");
      for (index = i = 0, len = children.length; i < len; index = ++i) {
        child = children[index];
        child.classList.add("animate-out");
        if (index === children.length - 1) {
          child.addEventListener("animationend", function() {
            return childContainer.innerHTML = "";
          });
        }
      }
      return this.blur();
    };

    BaseNode.prototype.setNodeSize = function() {
      return this.html.querySelector(".node").style.width = (this.html.querySelector(".node-content-container").offsetWidth) + "px";
    };

    BaseNode.prototype.buildExpandButton = function() {
      var chevron, nodeExpand, pipe;
      nodeExpand = document.createElement("div");
      nodeExpand.classList.add("node-expand", "prevent-default");
      nodeExpand.style.backgroundColor = this.nodeData.color;
      chevron = document.createElement("div");
      chevron.classList.add("chevron", this.nodeData.side);
      pipe = document.createElement("div");
      pipe.classList.add("pipe");
      nodeExpand.appendChild(chevron);
      nodeExpand.appendChild(pipe);
      return nodeExpand;
    };

    return BaseNode;

  })();

  ChecklistNode = (function(superClass) {
    extend(ChecklistNode, superClass);

    function ChecklistNode() {
      return ChecklistNode.__super__.constructor.apply(this, arguments);
    }

    ChecklistNode.prototype.build = function() {
      var bar, checkbox, checklist, checklistID, checkmark, i, item, label, len, progressbar, ref, rule, target, theorem;
      ChecklistNode.__super__.build.call(this);
      this.html.classList.add("checklist");
      progressbar = document.createElement("div");
      progressbar.classList.add("node-checklist-progressbar");
      bar = document.createElement("div");
      bar.classList.add("bar");
      progressbar.appendChild(bar);
      this.html.querySelector(".node-content-container").appendChild(progressbar);
      checklist = document.createElement("ul");
      checklistID = this.html.id;
      target = "#" + checklistID + " .checkmark:after";
      rule = "border-style:solid!important;border-color:" + this.nodeData.color + "!important;border-image:initial!important;border-width: 0 3px 3px 0 !important;";
      if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
        document.styleSheets[0].insertRule(target + " {" + rule + "}");
      } else {
        document.styleSheets[0].addRule(target, rule);
      }
      ref = this.nodeData.data.theorems;
      for (i = 0, len = ref.length; i < len; i++) {
        theorem = ref[i];
        item = document.createElement("li");
        item.classList.add("checkbox-item", "prevent-default");
        label = document.createElement("label");
        label.classList.add("container");
        label.innerHTML = theorem;
        checkbox = document.createElement("input");
        checkbox.type = "checkbox";
        checkmark = document.createElement("div");
        checkmark.classList.add("checkmark", checklistID);
        label.appendChild(checkbox);
        label.appendChild(checkmark);
        item.appendChild(label);
        checklist.appendChild(item);
      }
      this.html.querySelector(".node-active-content").appendChild(checklist);
      return this;
    };

    ChecklistNode.prototype.onClickEvent = function(event) {
      var allCheckboxes, bar, checkedCheckboxes, expandButton, feedback, i, len, parent, percentage, percentageChecked, ref, results, target;
      ChecklistNode.__super__.onClickEvent.call(this, event);
      if (!recursiveHasClass(event.target, "checkbox-item")) {
        return;
      }
      target = event.target;
      parent = target.closest(".node");
      bar = parent.querySelector(".bar");
      checkedCheckboxes = parent.querySelectorAll("input[type='checkbox']:checked").length;
      allCheckboxes = parent.querySelectorAll("input[type='checkbox']").length;
      percentageChecked = Math.ceil(checkedCheckboxes / allCheckboxes * 100);
      bar.style.width = percentageChecked + "%";
      if (checkedCheckboxes >= 2) {
        expandButton = parent.querySelector(".node-expand");
        if (!expandButton.classList.contains("active")) {
          expandButton.click();
        }
      }
      ref = Object.keys(this.nodeData.data.feedback).reverse();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        percentage = ref[i];
        if (percentageChecked >= percentage) {
          feedback = document.createElement("span");
          feedback.classList.add("textBubbleContent", "standard");
          feedback.innerHTML = this.nodeData.data.feedback[percentage];
          fg.mindmap.updateTextBubbleContent(feedback);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return ChecklistNode;

  })(BaseNode);

  TextNode = (function(superClass) {
    extend(TextNode, superClass);

    function TextNode() {
      return TextNode.__super__.constructor.apply(this, arguments);
    }

    TextNode.prototype.build = function() {
      TextNode.__super__.build.call(this);
      this.html.classList.add("text");
      this.html.querySelector(".node-active-content").innerHTML = this.nodeData.data.text;
      return this;
    };

    return TextNode;

  })(BaseNode);

  VideoNode = (function(superClass) {
    extend(VideoNode, superClass);

    function VideoNode() {
      return VideoNode.__super__.constructor.apply(this, arguments);
    }

    VideoNode.prototype.build = function() {
      var text, video;
      VideoNode.__super__.build.call(this);
      this.html.classList.add("video");
      if (this.nodeData.data.text) {
        text = document.createElement("div");
        text.classList.add("text");
        text.innerHTML = this.nodeData.data.text;
        this.html.querySelector(".node-active-content").appendChild(text);
      }
      if (this.nodeData.data.url) {
        this.open = false;
        video = document.createElement("iframe");
        video.frameborder = 0;
        video.setAttribute("allowfullscreen", "");
        video.setAttribute("mozallowfullscreen", "");
        video.setAttribute("msallowfullscreen", "");
        video.setAttribute("oallowfullscreen", "");
        video.setAttribute("webkitallowfullscreen", "");
        video.classList.add("frame");
        this.html.querySelector(".node-active-content").appendChild(video);
      }
      return this;
    };

    VideoNode.prototype.activateNode = function() {
      VideoNode.__super__.activateNode.call(this, this.html.querySelector(".node"));
      if (!this.open) {
        this.html.querySelector("iframe").src = this.nodeData.data.url;
        return this.open = true;
      }
    };

    return VideoNode;

  })(BaseNode);

  supportedNodeTypes = {
    "checklist": ChecklistNode,
    "text": TextNode,
    "video": VideoNode
  };

  EDITABLE_PROPERTIES = ["name", "color", "messages_open", "messages_close", "weight", "data_theorems", "data_text", "data_url", "type"];

  NORMALIZED_NAMES = {
    "name": "Naam",
    "color": "Kleur",
    "messages_open": "Openingstekst",
    "messages_close": "Sluitingstekst",
    "weight": "Positie",
    "data_theorems": "Stellingen",
    "data_text": "Tekst",
    "data_url": "Video link",
    "type": "Node Type"
  };

  PROPERTY_TYPES = {
    "name": "text",
    "color": "color",
    "messages_open": "multilinetext",
    "messages_close": "multilinetext",
    "weight": "position",
    "data_theorems": "multitext",
    "data_text": "multilinetext",
    "data_url": "videourl",
    "type": "nodetype"
  };

  Editor = (function() {
    var studiesEditorOpen, wysiwygEditorOpen;

    function Editor() {
      this.editorLink = bind(this.editorLink, this);
    }

    Editor.prototype.editorLink = function(node, event) {
      var previousNode;
      if (event.altKey) {
        previousNode = document.querySelector(".editor-selected");
        if (previousNode) {
          previousNode.classList.remove("editor-selected");
        }
        node.html.querySelector(".node").classList.add("editor-selected");
        this.node = node;
        this.editorContent = document.getElementById("editor-sidemenu-content");
        this.openInEditor();
        if (window.fg.sidemenu.closed) {
          window.fg.sidemenu.slideIn();
        }
        event.stopPropagation();
        return true;
      } else {
        return false;
      }
    };

    Editor.prototype.openInEditor = function() {
      var prop, property, ref, ref1, val, value;
      this.editorContent.innerHTML = "";
      ref = this.node.nodeData;
      for (property in ref) {
        value = ref[property];
        if (typeof value === "object") {
          for (prop in value) {
            val = value[prop];
            if (ref1 = property + "_" + prop, indexOf.call(EDITABLE_PROPERTIES, ref1) >= 0) {
              this.createItem(property + "_" + prop, val).addToEditor();
            }
          }
        } else {
          if (indexOf.call(EDITABLE_PROPERTIES, property) >= 0) {
            this.createItem(property, value).addToEditor();
          }
        }
      }
      this.addRemoveButtonCreate().addToEditor();
      this.listenForChanges();
      return this;
    };

    Editor.prototype.addEditStudiesButton = function() {
      var bubble, button;
      bubble = document.querySelector(".textBubbleContent.studySelect");
      button = document.createElement("button");
      button.id = "edit-studies-button";
      button.innerHTML = "Pas studies aan <i class='far fa-edit'></i>";
      button.addEventListener("click", this.studiesEditor);
      bubble.appendChild(button);
      return this;
    };

    studiesEditorOpen = false;

    Editor.prototype.studiesEditor = function() {
      var addStudyButton, closeButton, detailsColumn, i, item, len, name, openStudyListener, ref, removeEditor, studiesColumn, studiesEditorContainer, study, years;
      if (studiesEditorOpen) {
        return;
      }
      studiesEditorOpen = true;
      studiesEditorContainer = document.createElement("div");
      studiesEditorContainer.id = "studies-editor-container";
      studiesEditorContainer.className = "no-drag";
      openStudyListener = (function(_this) {
        return function(e) {
          var actionsTitle, addYearButton, buttonContainer, copyButton, createYearItem, deleteButton, detailsContainer, divider, i, info, item, j, len, len1, messageDivider, messagesTitle, moveDownButton, moveUpButton, ref, renameButton, resetEdit, resetTitle, sortedStudyYears, study, studyData, studyItem, studyYears, title, welcomeEdit, welcomeTitle, year, yearsContainer, yearsDivider, yearsTitle;
          if (e.target.closest(".study-row").classList.contains("active")) {
            return;
          }
          ref = document.querySelectorAll(".study-row");
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            item.classList.remove("active");
          }
          studyItem = e.target.closest(".study-row");
          studyItem.classList.add("active");
          study = studyItem.getAttribute("data-study");
          studyData = window.fg.mindmap.data.studies[study];
          detailsContainer = document.querySelector("#details-column");
          detailsContainer.innerHTML = "";
          title = document.createElement("h2");
          title.id = "study-title";
          title.innerText = study;
          detailsContainer.appendChild(title);
          info = document.createElement("h6");
          info.className = "study-info";
          info.innerText = (Object.keys(studyData.years).length) + " studiejaren";
          detailsContainer.appendChild(info);
          divider = document.createElement("hr");
          detailsContainer.appendChild(divider);
          actionsTitle = document.createElement("h3");
          actionsTitle.innerText = "Acties";
          detailsContainer.appendChild(actionsTitle);
          buttonContainer = document.createElement("div");
          buttonContainer.id = "buttonContainer";
          copyButton = document.createElement("button");
          copyButton.id = "copy-study-button";
          copyButton.innerHTML = "Studie dupliceren <i class='far fa-copy'></i>";
          copyButton.addEventListener("click", function() {
            var copiedName, name, option, years;
            copiedName = window.prompt("Wat is de naam van de nieuwe studie?");
            window.fg.mindmap.data.studies[copiedName] = JSON.parse(JSON.stringify(window.fg.mindmap.data.studies[study]));
            window.fg.mindmap.data.studies[copiedName].data.weight = Object.keys(window.fg.mindmap.data.studies).length;
            option = document.createElement("option");
            option.value = window.fg.mindmap.data.studies[copiedName].data.weight - 1;
            option.innerText = copiedName;
            document.querySelector("#studySelect").appendChild(option);
            window.fg.mindmap.sortedStudies.push(copiedName);
            item = document.createElement("div");
            item.classList.add("study-row");
            item.setAttribute("data-study", copiedName);
            name = document.createElement("span");
            name.className = "study-name";
            name.innerHTML = copiedName;
            item.appendChild(name);
            years = document.createElement("span");
            years.className = "study-year-count";
            years.innerHTML = (Object.keys(window.fg.mindmap.data.studies[copiedName].years).length) + " studiejaren";
            item.appendChild(years);
            item.addEventListener("click", function(e) {
              return openStudyListener(e);
            });
            return studiesColumn.insertBefore(item, document.querySelector("#add-study-button"));
          });
          buttonContainer.appendChild(copyButton);
          deleteButton = document.createElement("button");
          deleteButton.id = "delete-study-button";
          deleteButton.innerHTML = "Studie verwijderen <i class='far fa-trash-alt'></i>";
          deleteButton.addEventListener("click", function() {
            var j, len1, option, ref1;
            if (window.confirm("Weet je zeker dat je de studie '" + study + "' wil verwijderen?")) {
              delete window.fg.mindmap.data.studies[study];
              studyItem.parentElement.removeChild(studyItem);
              window.fg.mindmap.sortedStudies.splice(window.fg.mindmap.sortedStudies.indexOf(study), 1);
              ref1 = document.querySelectorAll("#studySelect option");
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                option = ref1[j];
                if (option.innerText === study) {
                  option.parentElement.removeChild(option);
                  return;
                }
              }
              return document.querySelector("#details-column").innerHTML = "<h3>'" + study + "' is verwijderd</h3>";
            }
          });
          buttonContainer.appendChild(deleteButton);
          renameButton = document.createElement("button");
          renameButton.id = "rename-study-button";
          renameButton.innerHTML = "Studie hernoemen <i class='far fa-edit'></i>";
          renameButton.addEventListener("click", function() {
            var newName, row;
            newName = window.prompt("Wat is de nieuwe naam van de studie?");
            if (newName) {
              study[window.fg.mindmap.sortedStudies.indexOf(study)] = newName;
              window.fg.mindmap.data.studies[newName] = JSON.parse(JSON.stringify(window.fg.mindmap.data.studies[study]));
              delete window.fg.mindmap.data.studies[study];
              document.querySelector("#study-title").innerText = newName;
              row = document.querySelector("#studies-column .study-row[data-study='" + study + "']");
              row.setAttribute("data-study", newName);
              row.querySelector(".study-name").innerText = newName;
              return document.querySelector("#studySelect option[value='" + (window.fg.mindmap.sortedStudies.indexOf("BSc Blyat")) + "']").innerText = newName;
            }
          });
          buttonContainer.appendChild(renameButton);
          moveUpButton = document.createElement("button");
          moveUpButton.id = "move-up-button";
          moveUpButton.innerHTML = "Omhoog <i class='fas fa-sort-up'></i>";
          if (studyData.data.weight === 1) {
            moveUpButton.disabled = true;
          }
          moveUpButton.addEventListener("click", function() {
            var higherStudy, higherWeight, index, j, len1, name, o, ref1, results, studyRow;
            moveDownButton.disabled = false;
            higherStudy = Object.keys(window.fg.mindmap.data.studies).find(key => window.fg.mindmap.data.studies[key].data.weight == studyData.data.weight - 1);
            higherWeight = window.fg.mindmap.data.studies[higherStudy].data.weight;
            window.fg.mindmap.data.studies[higherStudy].data.weight = studyData.data.weight;
            studyData.data.weight = higherWeight;
            studyItem.parentNode.insertBefore(studyItem, studyItem.previousElementSibling);
            if (studyData.data.weight === 1) {
              moveUpButton.disabled = true;
            }
            window.fg.mindmap.sortedStudies = [];
            document.querySelector("#studySelect").innerHTML = "<option value='null' selected='' disabled='' class='placeholder'>Selecteer je studie</option>";
            ref1 = document.querySelectorAll("#studies-column .study-row");
            results = [];
            for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
              studyRow = ref1[index];
              name = studyRow.getAttribute("data-study");
              window.fg.mindmap.sortedStudies.push(name);
              o = document.createElement("option");
              o.value = index;
              o.innerText = name;
              results.push(document.querySelector("#studySelect").appendChild(o));
            }
            return results;
          });
          buttonContainer.appendChild(moveUpButton);
          moveDownButton = document.createElement("button");
          moveDownButton.id = "move-down-button";
          moveDownButton.innerHTML = "Omlaag <i class='fas fa-sort-down'></i>";
          if (studyData.data.weight === Object.keys(window.fg.mindmap.data.studies).length) {
            moveDownButton.disabled = true;
          }
          moveDownButton.addEventListener("click", function() {
            var index, j, len1, lowerStudy, lowerWeight, name, o, ref1, results, studyRow;
            moveUpButton.disabled = false;
            lowerStudy = Object.keys(window.fg.mindmap.data.studies).find(key => window.fg.mindmap.data.studies[key].data.weight == studyData.data.weight + 1);
            lowerWeight = window.fg.mindmap.data.studies[lowerStudy].data.weight;
            window.fg.mindmap.data.studies[lowerStudy].data.weight = studyData.data.weight;
            studyData.data.weight = lowerWeight;
            studyItem.parentNode.insertBefore(studyItem.nextElementSibling, studyItem);
            if (studyData.data.weight === Object.keys(window.fg.mindmap.data.studies).length) {
              moveDownButton.disabled = true;
            }
            window.fg.mindmap.sortedStudies = [];
            document.querySelector("#studySelect").innerHTML = "<option value='null' selected='' disabled='' class='placeholder'>Selecteer je studie</option>";
            ref1 = document.querySelectorAll("#studies-column .study-row");
            results = [];
            for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
              studyRow = ref1[index];
              name = studyRow.getAttribute("data-study");
              window.fg.mindmap.sortedStudies.push(name);
              o = document.createElement("option");
              o.value = index;
              o.innerText = name;
              results.push(document.querySelector("#studySelect").appendChild(o));
            }
            return results;
          });
          buttonContainer.appendChild(moveDownButton);
          detailsContainer.appendChild(buttonContainer);
          messageDivider = document.createElement("hr");
          detailsContainer.appendChild(messageDivider);
          messagesTitle = document.createElement("h3");
          messagesTitle.innerText = "Berichten";
          detailsContainer.appendChild(messagesTitle);
          welcomeTitle = document.createElement("h6");
          welcomeTitle.className = "message-title";
          welcomeTitle.innerText = "Welkomst-tekst";
          detailsContainer.appendChild(welcomeTitle);
          welcomeEdit = document.createElement("input");
          welcomeEdit.className = "message-edit";
          welcomeEdit.value = studyData.data.welcomeMessage || "Lorem ipsum dolor";
          welcomeEdit.addEventListener("click", function() {
            return window.fg.editor.createWYSIWYGEditor(welcomeEdit.value, function(value) {
              welcomeEdit.value = value;
              return window.fg.mindmap.data.studies[study].data.welcomeMessage = value;
            });
          });
          detailsContainer.appendChild(welcomeEdit);
          resetTitle = document.createElement("h6");
          resetTitle.className = "message-title";
          resetTitle.innerText = "Reset-tekst";
          detailsContainer.appendChild(resetTitle);
          resetEdit = document.createElement("input");
          resetEdit.className = "message-edit";
          resetEdit.value = studyData.data.resetMessage || "Lorem ipsum dolor";
          resetEdit.addEventListener("click", function() {
            return window.fg.editor.createWYSIWYGEditor(resetEdit.value, function(value) {
              resetEdit.value = value;
              return window.fg.mindmap.data.studies[study].data.resetMessage = value;
            });
          });
          detailsContainer.appendChild(resetEdit);
          yearsDivider = document.createElement("hr");
          detailsContainer.appendChild(yearsDivider);
          yearsTitle = document.createElement("h3");
          yearsTitle.innerText = "Studiejaren";
          detailsContainer.appendChild(yearsTitle);
          yearsContainer = document.createElement("ul");
          yearsContainer.id = "years-container";
          studyYears = Object.keys(studyData.years);
          sortedStudyYears = studyYears.sort(function(a, b) {
            var weightA, weightB;
            weightA = parseInt(studyData.years[a].data.weight);
            weightB = parseInt(studyData.years[b].data.weight);
            if (weightA > weightB) {
              return 1;
            }
            if (weightA < weightB) {
              return -1;
            }
            return 0;
          });
          createYearItem = function(year) {
            let yearName = year;
            let item = document.createElement("li");
            var changeNameButton, dupButton, name;
            name = document.createElement("label");
            name.innerText = yearName;
            item.appendChild(name);
            deleteButton = document.createElement("button");
            deleteButton.className = "delete";
            deleteButton.innerHTML = "<i class='far fa-trash-alt'></i>";
            deleteButton.addEventListener("click", function() {
              if (window.confirm("Weet je zeker dat je het studiejaar '" + yearName + "' wilt verwijderen?")) {
                yearsContainer.removeChild(item);
                return delete studyData.years[yearName];
              }
            });
            item.appendChild(deleteButton);
            dupButton = document.createElement("button");
            dupButton.className = "duplicate";
            dupButton.innerHTML = "<i class='far fa-copy'></i>";
            dupButton.addEventListener("click", function() {
              var dupName, studyCount;
              dupName = window.prompt("Wat is de naam van de nieuwe studie?");
              if (dupName) {
                window.fg.mindmap.data.studies[study].years[dupName] = JSON.parse(JSON.stringify(studyData.years[yearName]));
                window.fg.mindmap.data.studies[study].years[dupName].data.weight = Object.keys(studyData.years).length;
                document.querySelector("#years-container .order.down:disabled").disabled = false;
                studyCount = parseInt(document.querySelector("#studies-column [data-study='" + study + "'] .study-year-count").innerText) + 1;
                document.querySelector("#studies-column [data-study='" + study + "'] .study-year-count").innerText = studyCount + " studiejaren";
                document.querySelector("#details-column h6").innerText = studyCount + " studiejaren";
                return createYearItem(dupName);
              }
            });
            item.appendChild(dupButton);
            let downButton = document.createElement("button");
            downButton.className = "order down";
            downButton.innerHTML = "<i class='fas fa-sort-down'></i>";
            if (parseInt(studyData.years[yearName].data.weight) === Object.keys(studyData.years).length) {
              downButton.disabled = true;
            }
            item.appendChild(downButton);
            let upButton = document.createElement("button");
            upButton.className = "order up";
            upButton.innerHTML = "<i class='fas fa-sort-up'></i>";
            if (parseInt(studyData.years[yearName].data.weight) === 1) {
              upButton.disabled = true;
            }
            item.appendChild(upButton);
            downButton.addEventListener("click", function() {
              var lowerYear;
              lowerYear = Object.keys(studyData.years).find(key => studyData.years[key].data.weight == parseInt(studyData.years[yearName].data.weight) + 1);
              studyData.years[lowerYear].data.weight -= 1;
              item.nextElementSibling.querySelector(".order.down").disabled = downButton.disabled;
              item.nextElementSibling.querySelector(".order.up").disabled = upButton.disabled;
              upButton.disabled = false;
              yearsContainer.insertBefore(item.nextElementSibling, item);
              studyData.years[yearName].data.weight = parseInt(studyData.years[yearName].data.weight) + 1;
              if (parseInt(studyData.years[yearName].data.weight) === Object.keys(studyData.years).length) {
                return downButton.disabled = true;
              }
            });
            upButton.addEventListener("click", function() {
              var higherYear;
              higherYear = Object.keys(studyData.years).find(key => studyData.years[key].data.weight == parseInt(studyData.years[yearName].data.weight) - 1);
              studyData.years[higherYear].data.weight += 1;
              item.previousElementSibling.querySelector(".order.down").disabled = downButton.disabled;
              item.previousElementSibling.querySelector(".order.up").disabled = upButton.disabled;
              downButton.disabled = false;
              yearsContainer.insertBefore(item, item.previousElementSibling);
              studyData.years[yearName].data.weight = parseInt(studyData.years[yearName].data.weight) - 1;
              if (parseInt(studyData.years[yearName].data.weight) === 1) {
                return upButton.disabled = true;
              }
            });
            changeNameButton = document.createElement("button");
            changeNameButton.className = "edit";
            changeNameButton.innerHTML = "<i class='far fa-edit'></i>";
            changeNameButton.addEventListener("click", function() {
              var newName;
              newName = window.prompt("Wat is de nieuwe naam van '" + yearName + "'?");
              if (newName) {
                studyData.years[newName] = JSON.parse(JSON.stringify(studyData.years[yearName]));
                name.innerText = newName;
                return delete studyData.years[yearName];
              }
            });
            item.appendChild(changeNameButton);
            return yearsContainer.appendChild(item);
          };
          for (j = 0, len1 = sortedStudyYears.length; j < len1; j++) {
            year = sortedStudyYears[j];
            createYearItem(year);
          }
          detailsContainer.appendChild(yearsContainer);
          addYearButton = document.createElement("button");
          addYearButton.id = "add-year-button";
          addYearButton.innerHTML = "Jaar toevoegen <i class='fas fa-plus-square'></i>";
          addYearButton.addEventListener("click", function() {
            var studyCount, yearName;
            yearName = window.prompt("Wat is de naam van het nieuwe studiejaar?");
            if (yearName) {
              studyData.years[yearName] = {
                data: {
                  weight: Object.keys(studyData.years).length + 1
                },
                nodes: [
                  {
                    children: [],
                    name: "Nieuwe node....",
                    color: "#6b2565",
                    type: "text",
                    messages: {},
                    data: {
                      text: "Lorem ipsum dolor sit amet"
                    },
                    side: "left",
                    weight: 1
                  }
                ]
              };
              createYearItem(yearName);
              studyCount = parseInt(document.querySelector("#studies-column [data-study='" + study + "'] .study-year-count").innerText) + 1;
              document.querySelector("#studies-column [data-study='" + study + "'] .study-year-count").innerText = studyCount + " studiejaren";
              return document.querySelector("#details-column h6").innerText = studyCount + " studiejaren";
            }
          });
          return detailsContainer.appendChild(addYearButton);
        };
      })(this);
      studiesColumn = document.createElement("div");
      studiesColumn.id = "studies-column";
      ref = window.fg.mindmap.sortedStudies;
      for (i = 0, len = ref.length; i < len; i++) {
        study = ref[i];
        item = document.createElement("div");
        item.classList.add("study-row");
        item.setAttribute("data-study", study);
        name = document.createElement("span");
        name.className = "study-name";
        name.innerHTML = study;
        item.appendChild(name);
        years = document.createElement("span");
        years.className = "study-year-count";
        years.innerHTML = (Object.keys(window.fg.mindmap.data.studies[study].years).length) + " studiejaren";
        item.appendChild(years);
        item.addEventListener("click", (function(_this) {
          return function(e) {
            return openStudyListener(e);
          };
        })(this));
        studiesColumn.appendChild(item);
      }
      studiesEditorContainer.appendChild(studiesColumn);
      addStudyButton = document.createElement("button");
      addStudyButton.id = "add-study-button";
      addStudyButton.innerHTML = "Studie toevoegen <i class='fas fa-plus-square'></i>";
      addStudyButton.addEventListener("click", (function(_this) {
        return function() {
          var newStudyName, newStudyWeight;
          newStudyName = window.prompt("Wat is de naam van de toe te voegen studie?");
          if (newStudyName) {
            newStudyWeight = Object.keys(window.fg.mindmap.data.studies).length + 1;
            window.fg.mindmap.sortedStudies.push(newStudyName);
            window.fg.mindmap.data.studies[newStudyName] = {
              data: {
                weight: newStudyWeight
              },
              years: {}
            };
            window.fg.mindmap.studySelect.appendChild(new Option(newStudyName, newStudyWeight - 1));
            item = document.createElement("div");
            item.classList.add("study-row");
            item.setAttribute("data-study", newStudyName);
            name = document.createElement("span");
            name.className = "study-name";
            name.innerHTML = newStudyName;
            item.appendChild(name);
            years = document.createElement("span");
            years.className = "study-year-count";
            years.innerHTML = "0 studiejaren";
            item.appendChild(years);
            item.addEventListener("click", function(e) {
              return openStudyListener(e);
            });
            return studiesColumn.insertBefore(item, addStudyButton);
          }
        };
      })(this));
      studiesColumn.appendChild(addStudyButton);
      detailsColumn = document.createElement("div");
      detailsColumn.id = "details-column";
      detailsColumn.innerHTML = "<h3 id='placeholder-text'>Selecteer een studie om deze te bewerken</h3>";
      studiesEditorContainer.appendChild(detailsColumn);
      removeEditor = (function(_this) {
        return function() {
          document.querySelector("#content").removeChild(studiesEditorContainer);
          return window.fg.mindmap.removeOverlay();
        };
      })(this);
      closeButton = document.createElement("i");
      closeButton.id = "study-editor-close-button";
      closeButton.className = "far fa-times-circle";
      closeButton.addEventListener("click", removeEditor);
      studiesEditorContainer.appendChild(closeButton);
      document.querySelector("#content").appendChild(studiesEditorContainer);
      window.fg.mindmap.showOverlay(removeEditor);
      studiesEditorOpen = false;
      return this;
    };

    wysiwygEditorOpen = false;

    Editor.prototype.createWYSIWYGEditor = function(value, editorCallback) {
      var editor, options, removeContainer, saveButton, wysiwygContainer;
      if (wysiwygEditorOpen) {
        return;
      }
      wysiwygEditorOpen = true;
      wysiwygContainer = document.createElement("div");
      wysiwygContainer.id = "wysiwyg-container";
      wysiwygContainer.className = "no-drag";
      wysiwygContainer.style.display = "none";
      document.querySelector("#content").appendChild(wysiwygContainer);
      editor = document.createElement("div");
      editor.id = "wysiwyg-editor";
      wysiwygContainer.appendChild(editor);
      options = {
        placeholder: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        theme: "snow"
      };
      editor = new Quill('#wysiwyg-editor', options);
      if (value) {
        editor.root.innerHTML = value;
      }
      removeContainer = (function(_this) {
        return function() {
          editorCallback(editor.root.innerHTML);
          document.querySelector("#content").removeChild(wysiwygContainer);
          return wysiwygEditorOpen = false;
        };
      })(this);
      saveButton = document.createElement("button");
      saveButton.id = "wysiwyg-save-button";
      saveButton.innerHTML = "Opslaan <i class='fas fa-save'></i>";
      saveButton.addEventListener("click", (function(_this) {
        return function() {
          removeContainer();
          return window.fg.mindmap.removeOverlay();
        };
      })(this));
      wysiwygContainer.appendChild(saveButton);
      window.fg.mindmap.showOverlay(removeContainer);
      wysiwygContainer.style.display = "block";
      return this;
    };

    Editor.prototype.createInputBlock = function(name) {
      var block, title;
      block = document.createElement("div");
      block.className = "editor-item";
      title = document.createElement("label");
      title.className = "title";
      title.innerHTML = name;
      block.appendChild(title);
      return block;
    };

    Editor.prototype.createItem = function(name, value) {
      this.block = this.createInputBlock(NORMALIZED_NAMES[name]);
      this.addInputFields(name, value);
      return this;
    };

    Editor.prototype.addInputFields = function(name, value) {
      if (indexOf.call(Object.keys(PROPERTY_TYPES), name) >= 0) {
        this[PROPERTY_TYPES[name] + "InputCreate"](name, value);
      }
      return this;
    };

    Editor.prototype.addToEditor = function() {
      this.editorContent.appendChild(this.block);
      return this;
    };

    Editor.prototype.listenForChanges = function() {
      var field, i, j, len, len1, ref, ref1;
      ref = this.editorContent.querySelectorAll(".property");
      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        field.addEventListener("change", (function(_this) {
          return function(event) {
            var property;
            property = event.target.getAttribute("data-property");
            _this.updateProperty(property);
          };
        })(this));
      }
      ref1 = this.editorContent.querySelectorAll(".array-property");
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        field = ref1[j];
        this.makeRichTextInput(field, function(value) {
          return field.value = value;
        });
        field.addEventListener("change", (function(_this) {
          return function(event) {
            var property;
            property = event.target.getAttribute("data-property");
            _this.updateArrayProperty(property);
          };
        })(this));
      }
      return this;
    };

    Editor.prototype.updateProperty = function(property) {
      if (property.split("_").length > 1) {
        this.node.nodeData[property.split("_")[0]][property.split("_")[1]] = event.target.value;
      } else {
        this.node.nodeData[property] = event.target.value;
      }
      this.node.build().addListeners().rerender();
      return this;
    };

    Editor.prototype.updateArrayProperty = function(property) {
      var entry, i, len, new_values, ref;
      new_values = [];
      ref = this.editorContent.querySelectorAll("input[data-property='" + property + "']");
      for (i = 0, len = ref.length; i < len; i++) {
        entry = ref[i];
        new_values.push(entry.value);
      }
      if (property.split("_").length > 1) {
        this.node.nodeData[property.split("_")[0]][property.split("_")[1]] = new_values;
      } else {
        this.node.nodeData[property] = new_values;
      }
      this.node.build().addListeners().rerender();
      return this;
    };

    Editor.prototype.makeRichTextInput = function(input, callback) {
      input.addEventListener("click", (function(_this) {
        return function(e) {
          e.preventDefault();
          _this.createWYSIWYGEditor(tagCleanup(input.value), function(value) {
            callback(tagCleanup(value));
            return input.dispatchEvent(new Event("change"));
          });
          document.querySelector(".ql-editor").focus();
          return false;
        };
      })(this));
      return this;
    };

    Editor.prototype.textInputCreate = function(name, value) {
      var input;
      input = document.createElement("input");
      input.type = "text";
      input.id = "property-" + name;
      input.className = "property";
      input.setAttribute("data-property", name);
      input.value = value;
      this.makeRichTextInput(input, function(value) {
        return input.value = value;
      });
      this.block.appendChild(input);
      return this;
    };

    Editor.prototype.multilinetextInputCreate = function(name, value) {
      var input;
      input = document.createElement("textarea");
      input.id = "property-" + name;
      input.className = "property";
      input.setAttribute("data-property", name);
      input.value = value;
      this.makeRichTextInput(input, function(value) {
        return input.value = value;
      });
      this.block.appendChild(input);
      return this;
    };

    Editor.prototype.numberInputCreate = function(name, value) {
      var input;
      input = document.createElement("input");
      input.type = "number";
      input.id = "property-" + name;
      input.className = "property";
      input.setAttribute("data-property", name);
      input.value = value;
      this.block.appendChild(input);
      return this;
    };

    Editor.prototype.colorInputCreate = function(name, value) {
      var colorInput, hexBefore, hexBlock, hexInput;
      hexBlock = document.createElement("div");
      hexBlock.className = "hexblock";
      hexBefore = document.createElement("div");
      hexBefore.className = "hexbefore";
      hexBefore.innerHTML = "#";
      hexBlock.appendChild(hexBefore);
      hexInput = document.createElement("input");
      hexInput.type = "text";
      hexInput.className = "hexinput";
      hexInput.value = value.substr(1);
      hexBlock.appendChild(hexInput);
      colorInput = document.createElement("input");
      colorInput.type = "color";
      colorInput.id = "property-" + name;
      colorInput.className = "property";
      colorInput.setAttribute("data-property", name);
      colorInput.value = value;
      hexInput.addEventListener("change", function() {
        colorInput.value = "#" + hexInput.value;
        return colorInput.dispatchEvent(new Event("change"));
      });
      colorInput.addEventListener("change", function() {
        return hexInput.value = colorInput.value.substr(1);
      });
      this.block.appendChild(hexBlock);
      this.block.appendChild(colorInput);
      return this;
    };

    Editor.prototype.multitextInputCreate = function(name, values) {
      var addButton, i, input, inputBlock, len, removeButton, value;
      for (i = 0, len = values.length; i < len; i++) {
        value = values[i];
        inputBlock = document.createElement("div");
        inputBlock.className = "inputblock";
        input = document.createElement("input");
        input.type = "text";
        input.className = "array-property";
        input.setAttribute("data-property", name);
        input.value = value;
        inputBlock.appendChild(input);
        removeButton = document.createElement("i");
        removeButton.className = "removeButton far fa-trash-alt";
        inputBlock.appendChild(removeButton);
        removeButton.addEventListener("click", (function(_this) {
          return function(event) {
            event.target.parentElement.parentElement.removeChild(event.target.parentElement);
            return _this.updateArrayProperty(name);
          };
        })(this));
        this.block.appendChild(inputBlock);
      }
      addButton = document.createElement("button");
      addButton.className = "add-button";
      addButton.innerHTML = "Toevoegen <i class='fas fa-plus-square'></i>";
      addButton.addEventListener("click", (function(_this) {
        return function() {
          inputBlock = document.createElement("div");
          inputBlock.className = "inputblock";
          input = document.createElement("input");
          input.type = "text";
          input.className = "array-property";
          input.setAttribute("data-property", name);
          input.value = "";
          inputBlock.appendChild(input);
          input.addEventListener("change", function(event) {
            return _this.updateArrayProperty(name);
          });
          removeButton = document.createElement("i");
          removeButton.className = "removeButton far fa-trash-alt";
          inputBlock.appendChild(removeButton);
          _this.block.insertBefore(inputBlock, addButton);
          return input.focus();
        };
      })(this));
      this.block.appendChild(addButton);
      return this;
    };

    Editor.prototype.videourlInputCreate = function(name, value) {
      var input, openInUrl, platformLogo;
      input = document.createElement("input");
      input.type = "text";
      input.id = "property-" + name;
      input.className = "property";
      input.setAttribute("data-property", name);
      input.value = value;
      this.block.appendChild(input);
      openInUrl = document.createElement("a");
      openInUrl.className = "platform-url";
      openInUrl.href = value;
      openInUrl.target = "_blank";
      openInUrl.innerHTML = "Open in ";
      if (value.length === 0) {
        openInUrl.style.display = "none";
      }
      platformLogo = document.createElement("i");
      platformLogo.className = "fab fa-" + this.node.nodeData.data.type;
      openInUrl.appendChild(platformLogo);
      this.block.appendChild(openInUrl);
      input.addEventListener("change", (function(_this) {
        return function(event) {
          var elements, parser, validURL, videoID;
          parser = document.createElement("a");
          parser.href = input.value;
          validURL = false;
          if (parser.hostname === "www.youtube.com" || parser.hostname === "youtube.com") {
            _this.node.nodeData.data.type = "youtube";
            if (parser.pathname.startsWith("/watch")) {
              elements = parser.search.split("&")[0].split("=");
              if (elements[0] === "?v") {
                videoID = elements[1];
                input.value = "https://www.youtube.com/embed/" + videoID;
                openInUrl.href = "https://www.youtube.com/watch?v=" + videoID;
                platformLogo.className = "fab fa-youtube";
                validURL = true;
              }
            }
          } else if (parser.hostname === "www.drive.google.com" || parser.hostname === "drive.google.com") {
            _this.node.nodeData.data.type = "google-drive";
            if (parser.pathname.startsWith("/file/d/")) {
              videoID = parser.pathname.replace("/file/d/", "").split("/")[0];
              input.value = "https://drive.google.com/file/d/" + videoID + "/preview";
              openInUrl.href = "https://drive.google.com/file/d/" + videoID + "/view";
              platformLogo.className = "fab fa-google-drive";
              validURL = true;
            }
          }
          if (!validURL) {
            window.fg.sidemenu.errorMessage("Ongeldige video link");
            return event.stopPropagation();
          }
        };
      })(this));
      return this;
    };

    Editor.prototype.positionInputCreate = function(name, value) {
      var currentIndex, downButton, leftButton, maxWeight, rightButton, siblings, upButton;
      siblings = this.node.targetParent.querySelectorAll("li.child-item");
      currentIndex = 1 + Array.prototype.indexOf.call(siblings, this.node.html);
      maxWeight = siblings.length;
      upButton = document.createElement("button");
      upButton.className = "vertical-position-button";
      upButton.innerHTML = "<span>Omhoog</span> <i class='fas fa-sort-up'></i>";
      if (currentIndex === 1) {
        upButton.disabled = true;
      }
      this.block.appendChild(upButton);
      downButton = document.createElement("button");
      downButton.className = "vertical-position-button";
      downButton.innerHTML = "<span>Omlaag</span> <i class='fas fa-sort-down'></i>";
      if (currentIndex === maxWeight) {
        downButton.disabled = true;
      }
      this.block.appendChild(downButton);
      upButton.addEventListener("click", (function(_this) {
        return function(event) {
          currentIndex -= 1;
          _this.node.targetParent.insertBefore(_this.node.html, _this.node.html.previousElementSibling);
          _this.node.nodeData.weight = currentIndex;
          if (currentIndex === 1) {
            upButton.disabled = true;
          } else {
            upButton.disabled = false;
          }
          if (currentIndex === maxWeight) {
            return downButton.disabled = true;
          } else {
            return downButton.disabled = false;
          }
        };
      })(this));
      downButton.addEventListener("click", (function(_this) {
        return function(event) {
          currentIndex += 1;
          _this.node.targetParent.insertBefore(_this.node.html.nextElementSibling, _this.node.html);
          _this.node.nodeData.weight = currentIndex;
          if (currentIndex === 1) {
            upButton.disabled = true;
          } else {
            upButton.disabled = false;
          }
          if (currentIndex === maxWeight) {
            return downButton.disabled = true;
          } else {
            return downButton.disabled = false;
          }
        };
      })(this));
      if (this.node.isRootNode) {
        leftButton = document.createElement("button");
        leftButton.className = "horizontal-position-button";
        leftButton.innerHTML = "<i class='fas fa-caret-left'></i> Links";
        if (this.node.nodeData.side === "left") {
          leftButton.disabled = true;
        }
        this.block.appendChild(leftButton);
        rightButton = document.createElement("button");
        rightButton.className = "horizontal-position-button";
        rightButton.innerHTML = "Rechts <i class='fas fa-caret-right'></i>";
        if (this.node.nodeData.side === "right") {
          rightButton.disabled = true;
        }
        this.block.appendChild(rightButton);
        leftButton.addEventListener("click", (function(_this) {
          return function(event) {
            if (_this.node.html.querySelector(".chevron")) {
              _this.node.html.querySelector(".chevron").classList.replace("right", "left");
            }
            _this.node.nodeData.side = "left";
            _this.node.targetParent = document.querySelector("#leftbranch");
            document.querySelector("#leftbranch").appendChild(_this.node.html);
            leftButton.disabled = true;
            return rightButton.disabled = false;
          };
        })(this));
        rightButton.addEventListener("click", (function(_this) {
          return function(event) {
            if (_this.node.html.querySelector(".chevron")) {
              _this.node.html.querySelector(".chevron").classList.replace("left", "right");
            }
            _this.node.nodeData.side = "right";
            _this.node.targetParent = document.querySelector("#rightbranch");
            document.querySelector("#rightbranch").appendChild(_this.node.html);
            leftButton.disabled = false;
            return rightButton.disabled = true;
          };
        })(this));
      }
      return this;
    };

    Editor.prototype.nodetypeInputCreate = function() {
      var dropdown, dropdownContainer, i, len, option, type, types;
      types = [["text", "Tekst"], ["video", "Video"], ["checklist", "Checklist"]];
      dropdownContainer = document.createElement("span");
      dropdownContainer.className = "dropdown editor-dropdown";
      dropdown = document.createElement("select");
      dropdownContainer.appendChild(dropdown);
      for (i = 0, len = types.length; i < len; i++) {
        type = types[i];
        option = document.createElement("option");
        option.value = type[0];
        option.innerHTML = type[1];
        dropdown.appendChild(option);
      }
      dropdown.value = this.node.nodeData.type;
      this.block.appendChild(dropdownContainer);
      dropdown.addEventListener("change", (function(_this) {
        return function(event) {
          var id, isRootNode, newType, nodeData, targetParent;
          targetParent = _this.node.targetParent;
          id = _this.node.html.id;
          nodeData = _this.node.nodeData;
          isRootNode = _this.node.isRootNode;
          newType = event.target.value;
          if (newType === "text") {
            nodeData.data = {
              text: "Lorem ipsum dolor sit amet, consectetur adipisicing elit"
            };
          } else if (newType === "video") {
            nodeData.data = {
              type: "youtube",
              url: "https://www.youtube.com/embed/NpEaa2P7qZI",
              text: "Lorem ipsum dolor sit amet, consectetur adipisicing elit"
            };
          } else if (newType === "checklist") {
            nodeData.data = {
              theorems: ["Lorem ipsum dolor sit amet, consectetur adipisicing elit"],
              feedback: {
                "50": "Lorem ipsum dolor sit amet, consectetur adipisicing elit"
              }
            };
          }
          nodeData.type = newType;
          if (isRootNode) {
            window.fg.mindmap.mindmapData.nodes = window.fg.mindmap.mindmapData.nodes.filter(function(rootnode) {
              return rootnode !== _this.node.nodeData;
            });
          } else {
            _this.node.nodeData.parentObject.nodeData.children = _this.node.nodeData.parentObject.nodeData.children.filter(function(child) {
              return child !== _this.node.nodeData;
            });
          }
          _this.node = null;
          _this.node = new supportedNodeTypes[newType](nodeData, isRootNode);
          _this.node.targetParent = targetParent;
          _this.node.build();
          _this.node.html.id = id;
          _this.node.addListeners().rerender();
          if (isRootNode) {
            return window.fg.mindmap.mindmapData.nodes.push(_this.node.nodeData);
          } else {
            return _this.node.nodeData.parentObject.nodeData.children.push(_this.node.nodeData);
          }
        };
      })(this));
      return this;
    };

    Editor.prototype.addRemoveButtonCreate = function() {
      var addButton, addRootButton, removeButton;
      this.block = this.createInputBlock("Node");
      addButton = document.createElement("button");
      addButton.className = "node-add-button";
      addButton.innerHTML = "Extra node toevoegen <i class='fas fa-plus-square'></i>";
      this.block.appendChild(addButton);
      if (this.node.isRootNode) {
        addRootButton = document.createElement("button");
        addRootButton.className = "node-add-root-button";
        addRootButton.innerHTML = "Extra root node toevoegen <i class='fas fa-plus-square'></i>";
        this.block.appendChild(addRootButton);
      }
      removeButton = document.createElement("button");
      removeButton.className = "node-remove-button";
      removeButton.innerHTML = "Node verwijderen <i class='far fa-trash-alt'></i>";
      removeButton.disabled = document.querySelectorAll(".node").length <= 1;
      this.block.appendChild(removeButton);
      addButton.addEventListener("click", (function(_this) {
        return function(event) {
          var newNode, newRenderedNode;
          newNode = {
            children: [],
            color: "#6b2565",
            data: {
              text: "Lorem ipsum dolor"
            },
            messages: {
              open: "",
              close: ""
            },
            name: "Nieuwe node...",
            type: "text",
            weight: _this.node.nodeData.children.length
          };
          _this.node.nodeData.children.push(newNode);
          if (!_this.node.expanded) {
            if (_this.node.nodeData.children.length === 1) {
              _this.node.addExpandButton();
            }
            _this.node.html.querySelector(".node-expand").classList.toggle("active");
            _this.node.expanded = true;
            return _this.node.expandChildren();
          } else {
            newRenderedNode = new TextNode(newNode);
            newRenderedNode.nodeData.parent = _this.node.html;
            return newRenderedNode.build().addListeners().render();
          }
        };
      })(this));
      if (this.node.isRootNode) {
        addRootButton.addEventListener("click", (function(_this) {
          return function(event) {
            var newNode, newRenderedNode;
            newNode = {
              children: [],
              color: "#6b2565",
              data: {
                text: "Lorem ipsum dolor"
              },
              messages: {
                open: "",
                close: ""
              },
              name: "Nieuwe node...",
              side: _this.node.nodeData.side,
              type: "text",
              weight: _this.node.nodeData.children.length
            };
            window.fg.mindmap.mindmapData.nodes.push(newNode);
            newRenderedNode = new TextNode(newNode, true);
            return newRenderedNode.build().addListeners().render();
          };
        })(this));
      }
      removeButton.addEventListener("click", (function(_this) {
        return function(event) {
          if (!_this.node.isRootNode) {
            _this.node.nodeData.parentObject.nodeData.children = _this.node.nodeData.parentObject.nodeData.children.filter(function(child) {
              return child !== _this.node.nodeData;
            });
            _this.node.html.parentNode.removeChild(_this.node.html);
            _this.node = null;
            return window.fg.sidemenu.reset();
          } else {
            if (document.querySelectorAll(".root-child").length === 1) {
              return window.fg.sidemenu.errorMessage("De laatste root-node kan niet verwijderd worden");
            } else {
              window.fg.mindmap.mindmapData.nodes = window.fg.mindmap.mindmapData.nodes.filter(function(rootnode) {
                return rootnode !== _this.node.nodeData;
              });
              _this.node.html.parentNode.removeChild(_this.node.html);
              return window.fg.sidemenu.reset();
            }
          }
        };
      })(this));
      return this;
    };

    return Editor;

  })();

  SideMenu = (function() {
    function SideMenu() {
      this.content = document.getElementById("content");
      this.closed = true;
      this.buildSideMenu();
      this.sliding = false;
      this.previousMouseX = 0;
    }

    SideMenu.prototype.startListening = function() {
      this.bindSlideButton();
      this.bindSliderMouseDown();
      this.bindSliderMouseUp();
      this.bindSliderMouseMove();
      return this.bindSaveButton();
    };

    SideMenu.prototype.bindSlideButton = function() {
      return this.slideButton.addEventListener("click", (function(_this) {
        return function() {
          if (_this.sidemenu.classList.contains("sidemenu-open")) {
            _this.slideButton.classList.add("closed");
            return _this.slideOut();
          } else {
            _this.slideButton.classList.remove("closed");
            return _this.slideIn();
          }
        };
      })(this));
    };

    SideMenu.prototype.bindSliderMouseDown = function() {
      return this.sidemenuSlider.addEventListener("mousedown", (function(_this) {
        return function(event) {
          event.preventDefault();
          _this.sliding = true;
          return _this.previousMouseX = event.clientX;
        };
      })(this));
    };

    SideMenu.prototype.bindSliderMouseUp = function() {
      return document.addEventListener("mouseup", (function(_this) {
        return function(event) {
          event.preventDefault();
          return _this.sliding = false;
        };
      })(this));
    };

    SideMenu.prototype.bindSliderMouseMove = function() {
      return document.addEventListener("mousemove", (function(_this) {
        return function(event) {
          var movement, newWidth;
          if (_this.sliding) {
            event.preventDefault();
            movement = event.clientX - _this.previousMouseX;
            newWidth = Math.min(Math.max(_this.sidemenu.clientWidth - movement, window.screen.width * 0.15), window.screen.width * 0.6);
            _this.sidemenu.style.width = newWidth + "px";
            _this.sidemenu.style.left = "calc(100% - " + newWidth + "px)";
            _this.content.style.width = "calc(100% - " + newWidth + "px)";
            return _this.previousMouseX = event.clientX;
          }
        };
      })(this));
    };

    SideMenu.prototype.slideIn = function() {
      this.closed = false;
      this.content.removeAttribute("style");
      this.sidemenu.removeAttribute("style");
      this.content.classList.remove("sidemenu-closed");
      this.content.classList.add("sidemenu-open");
      this.sidemenu.classList.add("sidemenu-open");
      return this.sidemenu.classList.remove("sidemenu-closed");
    };

    SideMenu.prototype.slideOut = function() {
      this.closed = true;
      this.content.removeAttribute("style");
      this.sidemenu.removeAttribute("style");
      this.content.classList.remove("sidemenu-open");
      this.content.classList.add("sidemenu-closed");
      this.sidemenu.classList.remove("sidemenu-open");
      return this.sidemenu.classList.add("sidemenu-closed");
    };

    SideMenu.prototype.buildSideMenu = function() {
      var footer, header, placeholder, title;
      this.sidemenu = document.createElement("div");
      this.sidemenu.id = "editor-sidemenu";
      header = document.createElement("div");
      header.id = "editor-sidemenu-header";
      this.sidemenu.appendChild(header);
      title = document.createElement("h2");
      title.innerHTML = "Flow & Grow Editor";
      header.appendChild(title);
      this.lastSaved = document.createElement("h4");
      this.lastSaved.id = "editor-sidemenu-last-saved";
      this.lastSaved.innerHTML = "Laatst opgeslagen: nooit";
      header.appendChild(this.lastSaved);
      this.slideButton = document.createElement("button");
      this.slideButton.id = "editor-sidemenu-slidebutton";
      this.slideButton.innerHTML = "<i class='fas fa-angle-double-right'></i>";
      this.sidemenu.appendChild(this.slideButton);
      this.sidemenuSlider = document.createElement("div");
      this.sidemenuSlider.id = "editor-sidemenu-slider";
      this.sidemenu.appendChild(this.sidemenuSlider);
      this.sidemenuContent = document.createElement("div");
      this.sidemenuContent.id = "editor-sidemenu-content";
      this.sidemenu.appendChild(this.sidemenuContent);
      placeholder = document.createElement("div");
      placeholder.id = "editor-sidemenu-placeholder";
      placeholder.innerHTML = "Gebruik <b>alt + muisklik</b> om een element te bewerken.";
      this.sidemenuContent.appendChild(placeholder);
      footer = document.createElement("div");
      footer.id = "editor-sidemenu-footer";
      this.sidemenu.appendChild(footer);
      this.saveButton = document.createElement("button");
      this.saveButton.id = "editor-sidemenu-savebutton";
      this.saveButton.innerHTML = "Opslaan&nbsp;&nbsp;<i class='fas fa-save'></i>";
      footer.appendChild(this.saveButton);
      this.banner = document.createElement("div");
      this.banner.id = "editor-sidemenu-banner";
      footer.appendChild(this.banner);
      return document.getElementById("container").appendChild(this.sidemenu);
    };

    SideMenu.prototype.reset = function() {
      var placeholder;
      placeholder = document.createElement("div");
      placeholder.id = "editor-sidemenu-placeholder";
      placeholder.innerHTML = "Gebruik <b>alt + muisklik</b> om een element te bewerken.";
      this.sidemenuContent.innerHTML = "";
      return this.sidemenuContent.appendChild(placeholder);
    };

    SideMenu.prototype.successMessage = function(message) {
      this.banner.innerHTML = message;
      this.banner.className = "success";
      return setTimeout(((function(_this) {
        return function() {
          _this.banner.className = "";
          return _this.banner.innerHTML = "";
        };
      })(this)), 5000);
    };

    SideMenu.prototype.errorMessage = function(message) {
      this.banner.innerHTML = message;
      this.banner.className = "error";
      return setTimeout(((function(_this) {
        return function() {
          _this.banner.className = "";
          return _this.banner.innerHTML = "";
        };
      })(this)), 5000);
    };

    SideMenu.prototype.bindSaveButton = function() {
      return this.saveButton.addEventListener("click", (function(_this) {
        return function() {
          var cleanData, httpRequest;
          httpRequest = new XMLHttpRequest();
          httpRequest.onreadystatechange = function() {
            if (httpRequest.readyState === XMLHttpRequest.DONE) {
              if (httpRequest.status === 200) {
                _this.lastSaved.innerHTML = "Laatst opgeslagen: " + (new Date().getHours()) + ":" + (new Date().getMinutes());
                return _this.successMessage("Mindmap opgeslagen!");
              } else {
                _this.errorMessage("Kon de mindmap niet opslaan!");
                return console.error("Couldn't save!", httpRequest);
              }
            }
          };
          httpRequest.open("post", "save.php");
          httpRequest.setRequestHeader("Content-Type", "application/json", true);
          cleanData = function(json) {
            var child, cleanChildren, i, j, k, l, len, len1, len2, len3, node, ref, ref1, ref2, ref3, study, updateWeight, year;
            updateWeight = function(node) {
              node.weight = Array.from(node.element.parentNode.childNodes).indexOf(node.element);
              return delete node["element"];
            };
            cleanChildren = function(node) {
              var child, i, len, ref, results;
              if (node["parentObject"]) {
                delete node["parentObject"];
              }
              if (node.element) {
                updateWeight(node);
              }
              if (node.children) {
                ref = node.children;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  child = ref[i];
                  results.push(cleanChildren(child));
                }
                return results;
              }
            };
            ref = Object.keys(json.studies);
            for (i = 0, len = ref.length; i < len; i++) {
              study = ref[i];
              ref1 = Object.keys(json.studies[study].years);
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                year = ref1[j];
                ref2 = json.studies[study].years[year].nodes;
                for (k = 0, len2 = ref2.length; k < len2; k++) {
                  node = ref2[k];
                  if (node.element) {
                    updateWeight(node);
                  }
                  ref3 = node.children;
                  for (l = 0, len3 = ref3.length; l < len3; l++) {
                    child = ref3[l];
                    cleanChildren(child);
                  }
                }
              }
            }
            return json;
          };
          return httpRequest.send(JSON.stringify(cleanData(window.fg.mindmap.data)));
        };
      })(this));
    };

    return SideMenu;

  })();

  window.fg = {};

  document.addEventListener("DOMContentLoaded", function(event) {
    fg.editor = new Editor;
    BaseNode.prototype.externalClickListeners = [fg.editor.editorLink];
    fg.sidemenu = new SideMenu;
    fg.mindmap = new Mindmap(function() {
      return fg.editor.addEditStudiesButton();
    });
    fg.panHandler = new PanHandler;
    fg.clickHandler = new ClickHandler;
    fg.sidemenu.startListening();
    fg.sidemenu.slideIn();
    fg.panHandler.startListening();
    return fg.clickHandler.startListening();
  });

}).call(this);
